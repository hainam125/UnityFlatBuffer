// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace com.gnt.flatbuffers.mash
{

using global::System;
using global::FlatBuffers;

public enum SortBy : sbyte
{
 INFO_ID = 0,
 START_AT = 1,
 END_AT = 2,
};

public enum SortOrder : sbyte
{
 ASC = 0,
 DESC = 1,
};

public enum ChanelRange : sbyte
{
 NONE = 0,
 HANGAME = 1,
 SQEX_YAHOO = 2,
 NICONICO = 3,
};

public enum LangCode : sbyte
{
 JA = 0,
 EN = 1,
};

public enum QuestState : sbyte
{
 NONE = 0,
 WIN = 1,
 LOSE = 2,
};

public struct UserLoginReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static UserLoginReq GetRootAsUserLoginReq(ByteBuffer _bb) { return GetRootAsUserLoginReq(_bb, new UserLoginReq()); }
  public static UserLoginReq GetRootAsUserLoginReq(ByteBuffer _bb, UserLoginReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public UserLoginReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string OsVersion { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetOsVersionBytes() { return __p.__vector_as_arraysegment(4); }
  public string DeviceType { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetDeviceTypeBytes() { return __p.__vector_as_arraysegment(6); }
  public string DeviceId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetDeviceIdBytes() { return __p.__vector_as_arraysegment(8); }
  public string DeviceName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetDeviceNameBytes() { return __p.__vector_as_arraysegment(10); }
  public string AppId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetAppIdBytes() { return __p.__vector_as_arraysegment(12); }
  public string AppVersion { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetAppVersionBytes() { return __p.__vector_as_arraysegment(14); }
  public string UniqueId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetUniqueIdBytes() { return __p.__vector_as_arraysegment(16); }
  public string DeviceModel { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetDeviceModelBytes() { return __p.__vector_as_arraysegment(18); }
  public string Resolution { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetResolutionBytes() { return __p.__vector_as_arraysegment(20); }
  public string CpuArch { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetCpuArchBytes() { return __p.__vector_as_arraysegment(22); }
  public int MemoryTotal { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string OpenglesVersion { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetOpenglesVersionBytes() { return __p.__vector_as_arraysegment(26); }
  public string AppName { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetAppNameBytes() { return __p.__vector_as_arraysegment(28); }
  public string BundleId { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetBundleIdBytes() { return __p.__vector_as_arraysegment(30); }
  public int StorageTotal { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Carrier { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetCarrierBytes() { return __p.__vector_as_arraysegment(34); }
  public string BuildVersion { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetBuildVersionBytes() { return __p.__vector_as_arraysegment(36); }
  public string UserAgent { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetUserAgentBytes() { return __p.__vector_as_arraysegment(38); }
  public string VendorId { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetVendorIdBytes() { return __p.__vector_as_arraysegment(40); }
  public string Uuid { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetUuidBytes() { return __p.__vector_as_arraysegment(42); }
  public string AdvertisingID { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetAdvertisingIDBytes() { return __p.__vector_as_arraysegment(44); }
  public sbyte ADIDIsTrackingEnabled { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public long ADIDCreateAt { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<UserLoginReq> CreateUserLoginReq(FlatBufferBuilder builder,
      StringOffset osVersionOffset = default(StringOffset),
      StringOffset deviceTypeOffset = default(StringOffset),
      StringOffset deviceIdOffset = default(StringOffset),
      StringOffset deviceNameOffset = default(StringOffset),
      StringOffset appIdOffset = default(StringOffset),
      StringOffset appVersionOffset = default(StringOffset),
      StringOffset uniqueIdOffset = default(StringOffset),
      StringOffset deviceModelOffset = default(StringOffset),
      StringOffset resolutionOffset = default(StringOffset),
      StringOffset cpuArchOffset = default(StringOffset),
      int memoryTotal = 0,
      StringOffset openglesVersionOffset = default(StringOffset),
      StringOffset appNameOffset = default(StringOffset),
      StringOffset bundleIdOffset = default(StringOffset),
      int storageTotal = 0,
      StringOffset carrierOffset = default(StringOffset),
      StringOffset buildVersionOffset = default(StringOffset),
      StringOffset userAgentOffset = default(StringOffset),
      StringOffset vendorIdOffset = default(StringOffset),
      StringOffset uuidOffset = default(StringOffset),
      StringOffset advertisingIDOffset = default(StringOffset),
      sbyte ADIDIsTrackingEnabled = 0,
      long ADIDCreateAt = 0) {
    builder.StartObject(23);
    UserLoginReq.AddADIDCreateAt(builder, ADIDCreateAt);
    UserLoginReq.AddAdvertisingID(builder, advertisingIDOffset);
    UserLoginReq.AddUuid(builder, uuidOffset);
    UserLoginReq.AddVendorId(builder, vendorIdOffset);
    UserLoginReq.AddUserAgent(builder, userAgentOffset);
    UserLoginReq.AddBuildVersion(builder, buildVersionOffset);
    UserLoginReq.AddCarrier(builder, carrierOffset);
    UserLoginReq.AddStorageTotal(builder, storageTotal);
    UserLoginReq.AddBundleId(builder, bundleIdOffset);
    UserLoginReq.AddAppName(builder, appNameOffset);
    UserLoginReq.AddOpenglesVersion(builder, openglesVersionOffset);
    UserLoginReq.AddMemoryTotal(builder, memoryTotal);
    UserLoginReq.AddCpuArch(builder, cpuArchOffset);
    UserLoginReq.AddResolution(builder, resolutionOffset);
    UserLoginReq.AddDeviceModel(builder, deviceModelOffset);
    UserLoginReq.AddUniqueId(builder, uniqueIdOffset);
    UserLoginReq.AddAppVersion(builder, appVersionOffset);
    UserLoginReq.AddAppId(builder, appIdOffset);
    UserLoginReq.AddDeviceName(builder, deviceNameOffset);
    UserLoginReq.AddDeviceId(builder, deviceIdOffset);
    UserLoginReq.AddDeviceType(builder, deviceTypeOffset);
    UserLoginReq.AddOsVersion(builder, osVersionOffset);
    UserLoginReq.AddADIDIsTrackingEnabled(builder, ADIDIsTrackingEnabled);
    return UserLoginReq.EndUserLoginReq(builder);
  }

  public static void StartUserLoginReq(FlatBufferBuilder builder) { builder.StartObject(23); }
  public static void AddOsVersion(FlatBufferBuilder builder, StringOffset osVersionOffset) { builder.AddOffset(0, osVersionOffset.Value, 0); }
  public static void AddDeviceType(FlatBufferBuilder builder, StringOffset deviceTypeOffset) { builder.AddOffset(1, deviceTypeOffset.Value, 0); }
  public static void AddDeviceId(FlatBufferBuilder builder, StringOffset deviceIdOffset) { builder.AddOffset(2, deviceIdOffset.Value, 0); }
  public static void AddDeviceName(FlatBufferBuilder builder, StringOffset deviceNameOffset) { builder.AddOffset(3, deviceNameOffset.Value, 0); }
  public static void AddAppId(FlatBufferBuilder builder, StringOffset appIdOffset) { builder.AddOffset(4, appIdOffset.Value, 0); }
  public static void AddAppVersion(FlatBufferBuilder builder, StringOffset appVersionOffset) { builder.AddOffset(5, appVersionOffset.Value, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, StringOffset uniqueIdOffset) { builder.AddOffset(6, uniqueIdOffset.Value, 0); }
  public static void AddDeviceModel(FlatBufferBuilder builder, StringOffset deviceModelOffset) { builder.AddOffset(7, deviceModelOffset.Value, 0); }
  public static void AddResolution(FlatBufferBuilder builder, StringOffset resolutionOffset) { builder.AddOffset(8, resolutionOffset.Value, 0); }
  public static void AddCpuArch(FlatBufferBuilder builder, StringOffset cpuArchOffset) { builder.AddOffset(9, cpuArchOffset.Value, 0); }
  public static void AddMemoryTotal(FlatBufferBuilder builder, int memoryTotal) { builder.AddInt(10, memoryTotal, 0); }
  public static void AddOpenglesVersion(FlatBufferBuilder builder, StringOffset openglesVersionOffset) { builder.AddOffset(11, openglesVersionOffset.Value, 0); }
  public static void AddAppName(FlatBufferBuilder builder, StringOffset appNameOffset) { builder.AddOffset(12, appNameOffset.Value, 0); }
  public static void AddBundleId(FlatBufferBuilder builder, StringOffset bundleIdOffset) { builder.AddOffset(13, bundleIdOffset.Value, 0); }
  public static void AddStorageTotal(FlatBufferBuilder builder, int storageTotal) { builder.AddInt(14, storageTotal, 0); }
  public static void AddCarrier(FlatBufferBuilder builder, StringOffset carrierOffset) { builder.AddOffset(15, carrierOffset.Value, 0); }
  public static void AddBuildVersion(FlatBufferBuilder builder, StringOffset buildVersionOffset) { builder.AddOffset(16, buildVersionOffset.Value, 0); }
  public static void AddUserAgent(FlatBufferBuilder builder, StringOffset userAgentOffset) { builder.AddOffset(17, userAgentOffset.Value, 0); }
  public static void AddVendorId(FlatBufferBuilder builder, StringOffset vendorIdOffset) { builder.AddOffset(18, vendorIdOffset.Value, 0); }
  public static void AddUuid(FlatBufferBuilder builder, StringOffset uuidOffset) { builder.AddOffset(19, uuidOffset.Value, 0); }
  public static void AddAdvertisingID(FlatBufferBuilder builder, StringOffset advertisingIDOffset) { builder.AddOffset(20, advertisingIDOffset.Value, 0); }
  public static void AddADIDIsTrackingEnabled(FlatBufferBuilder builder, sbyte ADIDIsTrackingEnabled) { builder.AddSbyte(21, ADIDIsTrackingEnabled, 0); }
  public static void AddADIDCreateAt(FlatBufferBuilder builder, long ADIDCreateAt) { builder.AddLong(22, ADIDCreateAt, 0); }
  public static Offset<UserLoginReq> EndUserLoginReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<UserLoginReq>(o);
  }
};

public struct ChangeNicknameReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ChangeNicknameReq GetRootAsChangeNicknameReq(ByteBuffer _bb) { return GetRootAsChangeNicknameReq(_bb, new ChangeNicknameReq()); }
  public static ChangeNicknameReq GetRootAsChangeNicknameReq(ByteBuffer _bb, ChangeNicknameReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ChangeNicknameReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Nickname { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNicknameBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<ChangeNicknameReq> CreateChangeNicknameReq(FlatBufferBuilder builder,
      StringOffset nicknameOffset = default(StringOffset)) {
    builder.StartObject(1);
    ChangeNicknameReq.AddNickname(builder, nicknameOffset);
    return ChangeNicknameReq.EndChangeNicknameReq(builder);
  }

  public static void StartChangeNicknameReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddNickname(FlatBufferBuilder builder, StringOffset nicknameOffset) { builder.AddOffset(0, nicknameOffset.Value, 0); }
  public static Offset<ChangeNicknameReq> EndChangeNicknameReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ChangeNicknameReq>(o);
  }
};

public struct SyncUserDataReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SyncUserDataReq GetRootAsSyncUserDataReq(ByteBuffer _bb) { return GetRootAsSyncUserDataReq(_bb, new SyncUserDataReq()); }
  public static SyncUserDataReq GetRootAsSyncUserDataReq(ByteBuffer _bb, SyncUserDataReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SyncUserDataReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Models(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ModelsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SyncUserDataReq> CreateSyncUserDataReq(FlatBufferBuilder builder,
      VectorOffset modelsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    SyncUserDataReq.AddModels(builder, modelsOffset);
    return SyncUserDataReq.EndSyncUserDataReq(builder);
  }

  public static void StartSyncUserDataReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddModels(FlatBufferBuilder builder, VectorOffset modelsOffset) { builder.AddOffset(0, modelsOffset.Value, 0); }
  public static VectorOffset CreateModelsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartModelsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SyncUserDataReq> EndSyncUserDataReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SyncUserDataReq>(o);
  }
};

public struct CheatNightWalkerCreateReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CheatNightWalkerCreateReq GetRootAsCheatNightWalkerCreateReq(ByteBuffer _bb) { return GetRootAsCheatNightWalkerCreateReq(_bb, new CheatNightWalkerCreateReq()); }
  public static CheatNightWalkerCreateReq GetRootAsCheatNightWalkerCreateReq(ByteBuffer _bb, CheatNightWalkerCreateReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CheatNightWalkerCreateReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long MasterIds(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int MasterIdsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMasterIdsBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<CheatNightWalkerCreateReq> CreateCheatNightWalkerCreateReq(FlatBufferBuilder builder,
      VectorOffset masterIdsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    CheatNightWalkerCreateReq.AddMasterIds(builder, masterIdsOffset);
    return CheatNightWalkerCreateReq.EndCheatNightWalkerCreateReq(builder);
  }

  public static void StartCheatNightWalkerCreateReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddMasterIds(FlatBufferBuilder builder, VectorOffset masterIdsOffset) { builder.AddOffset(0, masterIdsOffset.Value, 0); }
  public static VectorOffset CreateMasterIdsVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartMasterIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<CheatNightWalkerCreateReq> EndCheatNightWalkerCreateReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CheatNightWalkerCreateReq>(o);
  }
};

public struct CheatNightWalkerDeleteReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CheatNightWalkerDeleteReq GetRootAsCheatNightWalkerDeleteReq(ByteBuffer _bb) { return GetRootAsCheatNightWalkerDeleteReq(_bb, new CheatNightWalkerDeleteReq()); }
  public static CheatNightWalkerDeleteReq GetRootAsCheatNightWalkerDeleteReq(ByteBuffer _bb, CheatNightWalkerDeleteReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CheatNightWalkerDeleteReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UserNWIds(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int UserNWIdsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetUserNWIdsBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<CheatNightWalkerDeleteReq> CreateCheatNightWalkerDeleteReq(FlatBufferBuilder builder,
      VectorOffset userNWIdsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    CheatNightWalkerDeleteReq.AddUserNWIds(builder, userNWIdsOffset);
    return CheatNightWalkerDeleteReq.EndCheatNightWalkerDeleteReq(builder);
  }

  public static void StartCheatNightWalkerDeleteReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddUserNWIds(FlatBufferBuilder builder, VectorOffset userNWIdsOffset) { builder.AddOffset(0, userNWIdsOffset.Value, 0); }
  public static VectorOffset CreateUserNWIdsVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartUserNWIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<CheatNightWalkerDeleteReq> EndCheatNightWalkerDeleteReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CheatNightWalkerDeleteReq>(o);
  }
};

public struct CheatNightWalkerLevelUpReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CheatNightWalkerLevelUpReq GetRootAsCheatNightWalkerLevelUpReq(ByteBuffer _bb) { return GetRootAsCheatNightWalkerLevelUpReq(_bb, new CheatNightWalkerLevelUpReq()); }
  public static CheatNightWalkerLevelUpReq GetRootAsCheatNightWalkerLevelUpReq(ByteBuffer _bb, CheatNightWalkerLevelUpReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CheatNightWalkerLevelUpReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UserNWId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Exp { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<CheatNightWalkerLevelUpReq> CreateCheatNightWalkerLevelUpReq(FlatBufferBuilder builder,
      long userNWId = 0,
      long exp = 0) {
    builder.StartObject(2);
    CheatNightWalkerLevelUpReq.AddExp(builder, exp);
    CheatNightWalkerLevelUpReq.AddUserNWId(builder, userNWId);
    return CheatNightWalkerLevelUpReq.EndCheatNightWalkerLevelUpReq(builder);
  }

  public static void StartCheatNightWalkerLevelUpReq(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddUserNWId(FlatBufferBuilder builder, long userNWId) { builder.AddLong(0, userNWId, 0); }
  public static void AddExp(FlatBufferBuilder builder, long exp) { builder.AddLong(1, exp, 0); }
  public static Offset<CheatNightWalkerLevelUpReq> EndCheatNightWalkerLevelUpReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CheatNightWalkerLevelUpReq>(o);
  }
};

public struct CheatNightMareCreateReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CheatNightMareCreateReq GetRootAsCheatNightMareCreateReq(ByteBuffer _bb) { return GetRootAsCheatNightMareCreateReq(_bb, new CheatNightMareCreateReq()); }
  public static CheatNightMareCreateReq GetRootAsCheatNightMareCreateReq(ByteBuffer _bb, CheatNightMareCreateReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CheatNightMareCreateReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long MasterIds(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int MasterIdsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMasterIdsBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<CheatNightMareCreateReq> CreateCheatNightMareCreateReq(FlatBufferBuilder builder,
      VectorOffset masterIdsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    CheatNightMareCreateReq.AddMasterIds(builder, masterIdsOffset);
    return CheatNightMareCreateReq.EndCheatNightMareCreateReq(builder);
  }

  public static void StartCheatNightMareCreateReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddMasterIds(FlatBufferBuilder builder, VectorOffset masterIdsOffset) { builder.AddOffset(0, masterIdsOffset.Value, 0); }
  public static VectorOffset CreateMasterIdsVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartMasterIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<CheatNightMareCreateReq> EndCheatNightMareCreateReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CheatNightMareCreateReq>(o);
  }
};

public struct CheatNightMareDeleteReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CheatNightMareDeleteReq GetRootAsCheatNightMareDeleteReq(ByteBuffer _bb) { return GetRootAsCheatNightMareDeleteReq(_bb, new CheatNightMareDeleteReq()); }
  public static CheatNightMareDeleteReq GetRootAsCheatNightMareDeleteReq(ByteBuffer _bb, CheatNightMareDeleteReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CheatNightMareDeleteReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UserNMIds(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int UserNMIdsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetUserNMIdsBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<CheatNightMareDeleteReq> CreateCheatNightMareDeleteReq(FlatBufferBuilder builder,
      VectorOffset userNMIdsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    CheatNightMareDeleteReq.AddUserNMIds(builder, userNMIdsOffset);
    return CheatNightMareDeleteReq.EndCheatNightMareDeleteReq(builder);
  }

  public static void StartCheatNightMareDeleteReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddUserNMIds(FlatBufferBuilder builder, VectorOffset userNMIdsOffset) { builder.AddOffset(0, userNMIdsOffset.Value, 0); }
  public static VectorOffset CreateUserNMIdsVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartUserNMIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<CheatNightMareDeleteReq> EndCheatNightMareDeleteReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CheatNightMareDeleteReq>(o);
  }
};

public struct CheatNightMareLevelUpReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CheatNightMareLevelUpReq GetRootAsCheatNightMareLevelUpReq(ByteBuffer _bb) { return GetRootAsCheatNightMareLevelUpReq(_bb, new CheatNightMareLevelUpReq()); }
  public static CheatNightMareLevelUpReq GetRootAsCheatNightMareLevelUpReq(ByteBuffer _bb, CheatNightMareLevelUpReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CheatNightMareLevelUpReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UserNMId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Exp { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<CheatNightMareLevelUpReq> CreateCheatNightMareLevelUpReq(FlatBufferBuilder builder,
      long userNMId = 0,
      long exp = 0) {
    builder.StartObject(2);
    CheatNightMareLevelUpReq.AddExp(builder, exp);
    CheatNightMareLevelUpReq.AddUserNMId(builder, userNMId);
    return CheatNightMareLevelUpReq.EndCheatNightMareLevelUpReq(builder);
  }

  public static void StartCheatNightMareLevelUpReq(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddUserNMId(FlatBufferBuilder builder, long userNMId) { builder.AddLong(0, userNMId, 0); }
  public static void AddExp(FlatBufferBuilder builder, long exp) { builder.AddLong(1, exp, 0); }
  public static Offset<CheatNightMareLevelUpReq> EndCheatNightMareLevelUpReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CheatNightMareLevelUpReq>(o);
  }
};

public struct CheatAddFreeCoinReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CheatAddFreeCoinReq GetRootAsCheatAddFreeCoinReq(ByteBuffer _bb) { return GetRootAsCheatAddFreeCoinReq(_bb, new CheatAddFreeCoinReq()); }
  public static CheatAddFreeCoinReq GetRootAsCheatAddFreeCoinReq(ByteBuffer _bb, CheatAddFreeCoinReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CheatAddFreeCoinReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Coin { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<CheatAddFreeCoinReq> CreateCheatAddFreeCoinReq(FlatBufferBuilder builder,
      int coin = 0) {
    builder.StartObject(1);
    CheatAddFreeCoinReq.AddCoin(builder, coin);
    return CheatAddFreeCoinReq.EndCheatAddFreeCoinReq(builder);
  }

  public static void StartCheatAddFreeCoinReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddCoin(FlatBufferBuilder builder, int coin) { builder.AddInt(0, coin, 0); }
  public static Offset<CheatAddFreeCoinReq> EndCheatAddFreeCoinReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CheatAddFreeCoinReq>(o);
  }
};

public struct CheatConsumeCoinReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CheatConsumeCoinReq GetRootAsCheatConsumeCoinReq(ByteBuffer _bb) { return GetRootAsCheatConsumeCoinReq(_bb, new CheatConsumeCoinReq()); }
  public static CheatConsumeCoinReq GetRootAsCheatConsumeCoinReq(ByteBuffer _bb, CheatConsumeCoinReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CheatConsumeCoinReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Coin { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<CheatConsumeCoinReq> CreateCheatConsumeCoinReq(FlatBufferBuilder builder,
      int coin = 0) {
    builder.StartObject(1);
    CheatConsumeCoinReq.AddCoin(builder, coin);
    return CheatConsumeCoinReq.EndCheatConsumeCoinReq(builder);
  }

  public static void StartCheatConsumeCoinReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddCoin(FlatBufferBuilder builder, int coin) { builder.AddInt(0, coin, 0); }
  public static Offset<CheatConsumeCoinReq> EndCheatConsumeCoinReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CheatConsumeCoinReq>(o);
  }
};

public struct PartyUpdateReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PartyUpdateReq GetRootAsPartyUpdateReq(ByteBuffer _bb) { return GetRootAsPartyUpdateReq(_bb, new PartyUpdateReq()); }
  public static PartyUpdateReq GetRootAsPartyUpdateReq(ByteBuffer _bb, PartyUpdateReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PartyUpdateReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sbyte PartyNo { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public string PartyName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetPartyNameBytes() { return __p.__vector_as_arraysegment(6); }
  public long UserNightWalkerIds(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int UserNightWalkerIdsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetUserNightWalkerIdsBytes() { return __p.__vector_as_arraysegment(8); }
  public long UserNightmareIds(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int UserNightmareIdsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetUserNightmareIdsBytes() { return __p.__vector_as_arraysegment(10); }

  public static Offset<PartyUpdateReq> CreatePartyUpdateReq(FlatBufferBuilder builder,
      sbyte partyNo = 0,
      StringOffset partyNameOffset = default(StringOffset),
      VectorOffset userNightWalkerIdsOffset = default(VectorOffset),
      VectorOffset userNightmareIdsOffset = default(VectorOffset)) {
    builder.StartObject(4);
    PartyUpdateReq.AddUserNightmareIds(builder, userNightmareIdsOffset);
    PartyUpdateReq.AddUserNightWalkerIds(builder, userNightWalkerIdsOffset);
    PartyUpdateReq.AddPartyName(builder, partyNameOffset);
    PartyUpdateReq.AddPartyNo(builder, partyNo);
    return PartyUpdateReq.EndPartyUpdateReq(builder);
  }

  public static void StartPartyUpdateReq(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddPartyNo(FlatBufferBuilder builder, sbyte partyNo) { builder.AddSbyte(0, partyNo, 0); }
  public static void AddPartyName(FlatBufferBuilder builder, StringOffset partyNameOffset) { builder.AddOffset(1, partyNameOffset.Value, 0); }
  public static void AddUserNightWalkerIds(FlatBufferBuilder builder, VectorOffset userNightWalkerIdsOffset) { builder.AddOffset(2, userNightWalkerIdsOffset.Value, 0); }
  public static VectorOffset CreateUserNightWalkerIdsVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartUserNightWalkerIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddUserNightmareIds(FlatBufferBuilder builder, VectorOffset userNightmareIdsOffset) { builder.AddOffset(3, userNightmareIdsOffset.Value, 0); }
  public static VectorOffset CreateUserNightmareIdsVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartUserNightmareIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<PartyUpdateReq> EndPartyUpdateReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PartyUpdateReq>(o);
  }
};

public struct BridgePeopleUpdateReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BridgePeopleUpdateReq GetRootAsBridgePeopleUpdateReq(ByteBuffer _bb) { return GetRootAsBridgePeopleUpdateReq(_bb, new BridgePeopleUpdateReq()); }
  public static BridgePeopleUpdateReq GetRootAsBridgePeopleUpdateReq(ByteBuffer _bb, BridgePeopleUpdateReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BridgePeopleUpdateReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string IosDeviceToken { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetIosDeviceTokenBytes() { return __p.__vector_as_arraysegment(4); }
  public string AndroidRegistrationId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetAndroidRegistrationIdBytes() { return __p.__vector_as_arraysegment(6); }
  public string FcmRegistrationId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetFcmRegistrationIdBytes() { return __p.__vector_as_arraysegment(8); }
  public string BirthYearMonth { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetBirthYearMonthBytes() { return __p.__vector_as_arraysegment(10); }

  public static Offset<BridgePeopleUpdateReq> CreateBridgePeopleUpdateReq(FlatBufferBuilder builder,
      StringOffset iosDeviceTokenOffset = default(StringOffset),
      StringOffset androidRegistrationIdOffset = default(StringOffset),
      StringOffset fcmRegistrationIdOffset = default(StringOffset),
      StringOffset birthYearMonthOffset = default(StringOffset)) {
    builder.StartObject(4);
    BridgePeopleUpdateReq.AddBirthYearMonth(builder, birthYearMonthOffset);
    BridgePeopleUpdateReq.AddFcmRegistrationId(builder, fcmRegistrationIdOffset);
    BridgePeopleUpdateReq.AddAndroidRegistrationId(builder, androidRegistrationIdOffset);
    BridgePeopleUpdateReq.AddIosDeviceToken(builder, iosDeviceTokenOffset);
    return BridgePeopleUpdateReq.EndBridgePeopleUpdateReq(builder);
  }

  public static void StartBridgePeopleUpdateReq(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddIosDeviceToken(FlatBufferBuilder builder, StringOffset iosDeviceTokenOffset) { builder.AddOffset(0, iosDeviceTokenOffset.Value, 0); }
  public static void AddAndroidRegistrationId(FlatBufferBuilder builder, StringOffset androidRegistrationIdOffset) { builder.AddOffset(1, androidRegistrationIdOffset.Value, 0); }
  public static void AddFcmRegistrationId(FlatBufferBuilder builder, StringOffset fcmRegistrationIdOffset) { builder.AddOffset(2, fcmRegistrationIdOffset.Value, 0); }
  public static void AddBirthYearMonth(FlatBufferBuilder builder, StringOffset birthYearMonthOffset) { builder.AddOffset(3, birthYearMonthOffset.Value, 0); }
  public static Offset<BridgePeopleUpdateReq> EndBridgePeopleUpdateReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BridgePeopleUpdateReq>(o);
  }
};

public struct BridgePeopleGetReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BridgePeopleGetReq GetRootAsBridgePeopleGetReq(ByteBuffer _bb) { return GetRootAsBridgePeopleGetReq(_bb, new BridgePeopleGetReq()); }
  public static BridgePeopleGetReq GetRootAsBridgePeopleGetReq(ByteBuffer _bb, BridgePeopleGetReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BridgePeopleGetReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool BridgeProfile { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool BridgeExtProfile { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MoneyField { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<BridgePeopleGetReq> CreateBridgePeopleGetReq(FlatBufferBuilder builder,
      bool bridgeProfile = false,
      bool bridgeExtProfile = false,
      bool moneyField = false) {
    builder.StartObject(3);
    BridgePeopleGetReq.AddMoneyField(builder, moneyField);
    BridgePeopleGetReq.AddBridgeExtProfile(builder, bridgeExtProfile);
    BridgePeopleGetReq.AddBridgeProfile(builder, bridgeProfile);
    return BridgePeopleGetReq.EndBridgePeopleGetReq(builder);
  }

  public static void StartBridgePeopleGetReq(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddBridgeProfile(FlatBufferBuilder builder, bool bridgeProfile) { builder.AddBool(0, bridgeProfile, false); }
  public static void AddBridgeExtProfile(FlatBufferBuilder builder, bool bridgeExtProfile) { builder.AddBool(1, bridgeExtProfile, false); }
  public static void AddMoneyField(FlatBufferBuilder builder, bool moneyField) { builder.AddBool(2, moneyField, false); }
  public static Offset<BridgePeopleGetReq> EndBridgePeopleGetReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BridgePeopleGetReq>(o);
  }
};

public struct BridgeCoinDepositCreateReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BridgeCoinDepositCreateReq GetRootAsBridgeCoinDepositCreateReq(ByteBuffer _bb) { return GetRootAsBridgeCoinDepositCreateReq(_bb, new BridgeCoinDepositCreateReq()); }
  public static BridgeCoinDepositCreateReq GetRootAsBridgeCoinDepositCreateReq(ByteBuffer _bb, BridgeCoinDepositCreateReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BridgeCoinDepositCreateReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Yen { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Price { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string PriceLocale { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetPriceLocaleBytes() { return __p.__vector_as_arraysegment(8); }
  public int Coin { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CoinFree { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string CoinName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetCoinNameBytes() { return __p.__vector_as_arraysegment(14); }
  public string CoinFreeName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetCoinFreeNameBytes() { return __p.__vector_as_arraysegment(16); }
  public string CheckProductId { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetCheckProductIdBytes() { return __p.__vector_as_arraysegment(18); }

  public static Offset<BridgeCoinDepositCreateReq> CreateBridgeCoinDepositCreateReq(FlatBufferBuilder builder,
      int yen = 0,
      float price = 0.0f,
      StringOffset priceLocaleOffset = default(StringOffset),
      int coin = 0,
      int coinFree = 0,
      StringOffset coinNameOffset = default(StringOffset),
      StringOffset coinFreeNameOffset = default(StringOffset),
      StringOffset checkProductIdOffset = default(StringOffset)) {
    builder.StartObject(8);
    BridgeCoinDepositCreateReq.AddCheckProductId(builder, checkProductIdOffset);
    BridgeCoinDepositCreateReq.AddCoinFreeName(builder, coinFreeNameOffset);
    BridgeCoinDepositCreateReq.AddCoinName(builder, coinNameOffset);
    BridgeCoinDepositCreateReq.AddCoinFree(builder, coinFree);
    BridgeCoinDepositCreateReq.AddCoin(builder, coin);
    BridgeCoinDepositCreateReq.AddPriceLocale(builder, priceLocaleOffset);
    BridgeCoinDepositCreateReq.AddPrice(builder, price);
    BridgeCoinDepositCreateReq.AddYen(builder, yen);
    return BridgeCoinDepositCreateReq.EndBridgeCoinDepositCreateReq(builder);
  }

  public static void StartBridgeCoinDepositCreateReq(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddYen(FlatBufferBuilder builder, int yen) { builder.AddInt(0, yen, 0); }
  public static void AddPrice(FlatBufferBuilder builder, float price) { builder.AddFloat(1, price, 0.0f); }
  public static void AddPriceLocale(FlatBufferBuilder builder, StringOffset priceLocaleOffset) { builder.AddOffset(2, priceLocaleOffset.Value, 0); }
  public static void AddCoin(FlatBufferBuilder builder, int coin) { builder.AddInt(3, coin, 0); }
  public static void AddCoinFree(FlatBufferBuilder builder, int coinFree) { builder.AddInt(4, coinFree, 0); }
  public static void AddCoinName(FlatBufferBuilder builder, StringOffset coinNameOffset) { builder.AddOffset(5, coinNameOffset.Value, 0); }
  public static void AddCoinFreeName(FlatBufferBuilder builder, StringOffset coinFreeNameOffset) { builder.AddOffset(6, coinFreeNameOffset.Value, 0); }
  public static void AddCheckProductId(FlatBufferBuilder builder, StringOffset checkProductIdOffset) { builder.AddOffset(7, checkProductIdOffset.Value, 0); }
  public static Offset<BridgeCoinDepositCreateReq> EndBridgeCoinDepositCreateReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BridgeCoinDepositCreateReq>(o);
  }
};

public struct BridgeCoinDepositIsoUpdateReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BridgeCoinDepositIsoUpdateReq GetRootAsBridgeCoinDepositIsoUpdateReq(ByteBuffer _bb) { return GetRootAsBridgeCoinDepositIsoUpdateReq(_bb, new BridgeCoinDepositIsoUpdateReq()); }
  public static BridgeCoinDepositIsoUpdateReq GetRootAsBridgeCoinDepositIsoUpdateReq(ByteBuffer _bb, BridgeCoinDepositIsoUpdateReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BridgeCoinDepositIsoUpdateReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long BridgeTransId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string ReceiptData { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetReceiptDataBytes() { return __p.__vector_as_arraysegment(6); }
  public string ReceiptTransactionId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetReceiptTransactionIdBytes() { return __p.__vector_as_arraysegment(8); }

  public static Offset<BridgeCoinDepositIsoUpdateReq> CreateBridgeCoinDepositIsoUpdateReq(FlatBufferBuilder builder,
      long bridgeTransId = 0,
      StringOffset receiptDataOffset = default(StringOffset),
      StringOffset receiptTransactionIdOffset = default(StringOffset)) {
    builder.StartObject(3);
    BridgeCoinDepositIsoUpdateReq.AddBridgeTransId(builder, bridgeTransId);
    BridgeCoinDepositIsoUpdateReq.AddReceiptTransactionId(builder, receiptTransactionIdOffset);
    BridgeCoinDepositIsoUpdateReq.AddReceiptData(builder, receiptDataOffset);
    return BridgeCoinDepositIsoUpdateReq.EndBridgeCoinDepositIsoUpdateReq(builder);
  }

  public static void StartBridgeCoinDepositIsoUpdateReq(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddBridgeTransId(FlatBufferBuilder builder, long bridgeTransId) { builder.AddLong(0, bridgeTransId, 0); }
  public static void AddReceiptData(FlatBufferBuilder builder, StringOffset receiptDataOffset) { builder.AddOffset(1, receiptDataOffset.Value, 0); }
  public static void AddReceiptTransactionId(FlatBufferBuilder builder, StringOffset receiptTransactionIdOffset) { builder.AddOffset(2, receiptTransactionIdOffset.Value, 0); }
  public static Offset<BridgeCoinDepositIsoUpdateReq> EndBridgeCoinDepositIsoUpdateReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BridgeCoinDepositIsoUpdateReq>(o);
  }
};

public struct BridgeCoinDepositAndroidUpdateReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BridgeCoinDepositAndroidUpdateReq GetRootAsBridgeCoinDepositAndroidUpdateReq(ByteBuffer _bb) { return GetRootAsBridgeCoinDepositAndroidUpdateReq(_bb, new BridgeCoinDepositAndroidUpdateReq()); }
  public static BridgeCoinDepositAndroidUpdateReq GetRootAsBridgeCoinDepositAndroidUpdateReq(ByteBuffer _bb, BridgeCoinDepositAndroidUpdateReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BridgeCoinDepositAndroidUpdateReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long BridgeTransId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string PurchaseData { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetPurchaseDataBytes() { return __p.__vector_as_arraysegment(6); }
  public string DataSignature { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetDataSignatureBytes() { return __p.__vector_as_arraysegment(8); }

  public static Offset<BridgeCoinDepositAndroidUpdateReq> CreateBridgeCoinDepositAndroidUpdateReq(FlatBufferBuilder builder,
      long bridgeTransId = 0,
      StringOffset purchaseDataOffset = default(StringOffset),
      StringOffset dataSignatureOffset = default(StringOffset)) {
    builder.StartObject(3);
    BridgeCoinDepositAndroidUpdateReq.AddBridgeTransId(builder, bridgeTransId);
    BridgeCoinDepositAndroidUpdateReq.AddDataSignature(builder, dataSignatureOffset);
    BridgeCoinDepositAndroidUpdateReq.AddPurchaseData(builder, purchaseDataOffset);
    return BridgeCoinDepositAndroidUpdateReq.EndBridgeCoinDepositAndroidUpdateReq(builder);
  }

  public static void StartBridgeCoinDepositAndroidUpdateReq(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddBridgeTransId(FlatBufferBuilder builder, long bridgeTransId) { builder.AddLong(0, bridgeTransId, 0); }
  public static void AddPurchaseData(FlatBufferBuilder builder, StringOffset purchaseDataOffset) { builder.AddOffset(1, purchaseDataOffset.Value, 0); }
  public static void AddDataSignature(FlatBufferBuilder builder, StringOffset dataSignatureOffset) { builder.AddOffset(2, dataSignatureOffset.Value, 0); }
  public static Offset<BridgeCoinDepositAndroidUpdateReq> EndBridgeCoinDepositAndroidUpdateReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BridgeCoinDepositAndroidUpdateReq>(o);
  }
};

public struct RewardByInviteCodeReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RewardByInviteCodeReq GetRootAsRewardByInviteCodeReq(ByteBuffer _bb) { return GetRootAsRewardByInviteCodeReq(_bb, new RewardByInviteCodeReq()); }
  public static RewardByInviteCodeReq GetRootAsRewardByInviteCodeReq(ByteBuffer _bb, RewardByInviteCodeReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RewardByInviteCodeReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string InviteCode { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetInviteCodeBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<RewardByInviteCodeReq> CreateRewardByInviteCodeReq(FlatBufferBuilder builder,
      StringOffset inviteCodeOffset = default(StringOffset)) {
    builder.StartObject(1);
    RewardByInviteCodeReq.AddInviteCode(builder, inviteCodeOffset);
    return RewardByInviteCodeReq.EndRewardByInviteCodeReq(builder);
  }

  public static void StartRewardByInviteCodeReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddInviteCode(FlatBufferBuilder builder, StringOffset inviteCodeOffset) { builder.AddOffset(0, inviteCodeOffset.Value, 0); }
  public static Offset<RewardByInviteCodeReq> EndRewardByInviteCodeReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RewardByInviteCodeReq>(o);
  }
};

public struct SerialCodeReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SerialCodeReq GetRootAsSerialCodeReq(ByteBuffer _bb) { return GetRootAsSerialCodeReq(_bb, new SerialCodeReq()); }
  public static SerialCodeReq GetRootAsSerialCodeReq(ByteBuffer _bb, SerialCodeReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SerialCodeReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string SerialCode { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetSerialCodeBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<SerialCodeReq> CreateSerialCodeReq(FlatBufferBuilder builder,
      StringOffset serialCodeOffset = default(StringOffset)) {
    builder.StartObject(1);
    SerialCodeReq.AddSerialCode(builder, serialCodeOffset);
    return SerialCodeReq.EndSerialCodeReq(builder);
  }

  public static void StartSerialCodeReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddSerialCode(FlatBufferBuilder builder, StringOffset serialCodeOffset) { builder.AddOffset(0, serialCodeOffset.Value, 0); }
  public static Offset<SerialCodeReq> EndSerialCodeReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SerialCodeReq>(o);
  }
};

public struct CSerialCodeReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CSerialCodeReq GetRootAsCSerialCodeReq(ByteBuffer _bb) { return GetRootAsCSerialCodeReq(_bb, new CSerialCodeReq()); }
  public static CSerialCodeReq GetRootAsCSerialCodeReq(ByteBuffer _bb, CSerialCodeReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CSerialCodeReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string SerialCode { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetSerialCodeBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<CSerialCodeReq> CreateCSerialCodeReq(FlatBufferBuilder builder,
      StringOffset serialCodeOffset = default(StringOffset)) {
    builder.StartObject(1);
    CSerialCodeReq.AddSerialCode(builder, serialCodeOffset);
    return CSerialCodeReq.EndCSerialCodeReq(builder);
  }

  public static void StartCSerialCodeReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddSerialCode(FlatBufferBuilder builder, StringOffset serialCodeOffset) { builder.AddOffset(0, serialCodeOffset.Value, 0); }
  public static Offset<CSerialCodeReq> EndCSerialCodeReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CSerialCodeReq>(o);
  }
};

public struct PinCodeCreateReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PinCodeCreateReq GetRootAsPinCodeCreateReq(ByteBuffer _bb) { return GetRootAsPinCodeCreateReq(_bb, new PinCodeCreateReq()); }
  public static PinCodeCreateReq GetRootAsPinCodeCreateReq(ByteBuffer _bb, PinCodeCreateReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PinCodeCreateReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long PincodeCampaignId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string Identifier { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetIdentifierBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<PinCodeCreateReq> CreatePinCodeCreateReq(FlatBufferBuilder builder,
      long pincodeCampaignId = 0,
      StringOffset identifierOffset = default(StringOffset)) {
    builder.StartObject(2);
    PinCodeCreateReq.AddPincodeCampaignId(builder, pincodeCampaignId);
    PinCodeCreateReq.AddIdentifier(builder, identifierOffset);
    return PinCodeCreateReq.EndPinCodeCreateReq(builder);
  }

  public static void StartPinCodeCreateReq(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddPincodeCampaignId(FlatBufferBuilder builder, long pincodeCampaignId) { builder.AddLong(0, pincodeCampaignId, 0); }
  public static void AddIdentifier(FlatBufferBuilder builder, StringOffset identifierOffset) { builder.AddOffset(1, identifierOffset.Value, 0); }
  public static Offset<PinCodeCreateReq> EndPinCodeCreateReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PinCodeCreateReq>(o);
  }
};

public struct PinCodeGetReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PinCodeGetReq GetRootAsPinCodeGetReq(ByteBuffer _bb) { return GetRootAsPinCodeGetReq(_bb, new PinCodeGetReq()); }
  public static PinCodeGetReq GetRootAsPinCodeGetReq(ByteBuffer _bb, PinCodeGetReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PinCodeGetReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long PincodeCampaignId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int GameId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Identifier { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetIdentifierBytes() { return __p.__vector_as_arraysegment(8); }

  public static Offset<PinCodeGetReq> CreatePinCodeGetReq(FlatBufferBuilder builder,
      long pincodeCampaignId = 0,
      int gameId = 0,
      StringOffset identifierOffset = default(StringOffset)) {
    builder.StartObject(3);
    PinCodeGetReq.AddPincodeCampaignId(builder, pincodeCampaignId);
    PinCodeGetReq.AddIdentifier(builder, identifierOffset);
    PinCodeGetReq.AddGameId(builder, gameId);
    return PinCodeGetReq.EndPinCodeGetReq(builder);
  }

  public static void StartPinCodeGetReq(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddPincodeCampaignId(FlatBufferBuilder builder, long pincodeCampaignId) { builder.AddLong(0, pincodeCampaignId, 0); }
  public static void AddGameId(FlatBufferBuilder builder, int gameId) { builder.AddInt(1, gameId, 0); }
  public static void AddIdentifier(FlatBufferBuilder builder, StringOffset identifierOffset) { builder.AddOffset(2, identifierOffset.Value, 0); }
  public static Offset<PinCodeGetReq> EndPinCodeGetReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PinCodeGetReq>(o);
  }
};

public struct PinCodeUpdateReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PinCodeUpdateReq GetRootAsPinCodeUpdateReq(ByteBuffer _bb) { return GetRootAsPinCodeUpdateReq(_bb, new PinCodeUpdateReq()); }
  public static PinCodeUpdateReq GetRootAsPinCodeUpdateReq(ByteBuffer _bb, PinCodeUpdateReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PinCodeUpdateReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long PincodeCampaignId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int TargetGameId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TargetIdentifier { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetTargetIdentifierBytes() { return __p.__vector_as_arraysegment(8); }
  public string PinCode { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetPinCodeBytes() { return __p.__vector_as_arraysegment(10); }

  public static Offset<PinCodeUpdateReq> CreatePinCodeUpdateReq(FlatBufferBuilder builder,
      long pincodeCampaignId = 0,
      int targetGameId = 0,
      StringOffset targetIdentifierOffset = default(StringOffset),
      StringOffset pinCodeOffset = default(StringOffset)) {
    builder.StartObject(4);
    PinCodeUpdateReq.AddPincodeCampaignId(builder, pincodeCampaignId);
    PinCodeUpdateReq.AddPinCode(builder, pinCodeOffset);
    PinCodeUpdateReq.AddTargetIdentifier(builder, targetIdentifierOffset);
    PinCodeUpdateReq.AddTargetGameId(builder, targetGameId);
    return PinCodeUpdateReq.EndPinCodeUpdateReq(builder);
  }

  public static void StartPinCodeUpdateReq(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddPincodeCampaignId(FlatBufferBuilder builder, long pincodeCampaignId) { builder.AddLong(0, pincodeCampaignId, 0); }
  public static void AddTargetGameId(FlatBufferBuilder builder, int targetGameId) { builder.AddInt(1, targetGameId, 0); }
  public static void AddTargetIdentifier(FlatBufferBuilder builder, StringOffset targetIdentifierOffset) { builder.AddOffset(2, targetIdentifierOffset.Value, 0); }
  public static void AddPinCode(FlatBufferBuilder builder, StringOffset pinCodeOffset) { builder.AddOffset(3, pinCodeOffset.Value, 0); }
  public static Offset<PinCodeUpdateReq> EndPinCodeUpdateReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PinCodeUpdateReq>(o);
  }
};

public struct PinCodeDeleteReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PinCodeDeleteReq GetRootAsPinCodeDeleteReq(ByteBuffer _bb) { return GetRootAsPinCodeDeleteReq(_bb, new PinCodeDeleteReq()); }
  public static PinCodeDeleteReq GetRootAsPinCodeDeleteReq(ByteBuffer _bb, PinCodeDeleteReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PinCodeDeleteReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long PincodeCampaignId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int GameId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Identifier { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetIdentifierBytes() { return __p.__vector_as_arraysegment(8); }

  public static Offset<PinCodeDeleteReq> CreatePinCodeDeleteReq(FlatBufferBuilder builder,
      long pincodeCampaignId = 0,
      int gameId = 0,
      StringOffset identifierOffset = default(StringOffset)) {
    builder.StartObject(3);
    PinCodeDeleteReq.AddPincodeCampaignId(builder, pincodeCampaignId);
    PinCodeDeleteReq.AddIdentifier(builder, identifierOffset);
    PinCodeDeleteReq.AddGameId(builder, gameId);
    return PinCodeDeleteReq.EndPinCodeDeleteReq(builder);
  }

  public static void StartPinCodeDeleteReq(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddPincodeCampaignId(FlatBufferBuilder builder, long pincodeCampaignId) { builder.AddLong(0, pincodeCampaignId, 0); }
  public static void AddGameId(FlatBufferBuilder builder, int gameId) { builder.AddInt(1, gameId, 0); }
  public static void AddIdentifier(FlatBufferBuilder builder, StringOffset identifierOffset) { builder.AddOffset(2, identifierOffset.Value, 0); }
  public static Offset<PinCodeDeleteReq> EndPinCodeDeleteReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PinCodeDeleteReq>(o);
  }
};

public struct NotificationDetailReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NotificationDetailReq GetRootAsNotificationDetailReq(ByteBuffer _bb) { return GetRootAsNotificationDetailReq(_bb, new NotificationDetailReq()); }
  public static NotificationDetailReq GetRootAsNotificationDetailReq(ByteBuffer _bb, NotificationDetailReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NotificationDetailReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long InfoId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public LangCode LangCode { get { int o = __p.__offset(6); return o != 0 ? (LangCode)__p.bb.GetSbyte(o + __p.bb_pos) : LangCode.JA; } }

  public static Offset<NotificationDetailReq> CreateNotificationDetailReq(FlatBufferBuilder builder,
      long infoId = 0,
      LangCode langCode = LangCode.JA) {
    builder.StartObject(2);
    NotificationDetailReq.AddInfoId(builder, infoId);
    NotificationDetailReq.AddLangCode(builder, langCode);
    return NotificationDetailReq.EndNotificationDetailReq(builder);
  }

  public static void StartNotificationDetailReq(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddInfoId(FlatBufferBuilder builder, long infoId) { builder.AddLong(0, infoId, 0); }
  public static void AddLangCode(FlatBufferBuilder builder, LangCode langCode) { builder.AddSbyte(1, (sbyte)langCode, 0); }
  public static Offset<NotificationDetailReq> EndNotificationDetailReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NotificationDetailReq>(o);
  }
};

public struct NotificationReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NotificationReq GetRootAsNotificationReq(ByteBuffer _bb) { return GetRootAsNotificationReq(_bb, new NotificationReq()); }
  public static NotificationReq GetRootAsNotificationReq(ByteBuffer _bb, NotificationReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NotificationReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SortBy SortBy { get { int o = __p.__offset(4); return o != 0 ? (SortBy)__p.bb.GetSbyte(o + __p.bb_pos) : SortBy.INFO_ID; } }
  public SortOrder SortOrder { get { int o = __p.__offset(6); return o != 0 ? (SortOrder)__p.bb.GetSbyte(o + __p.bb_pos) : SortOrder.ASC; } }
  public short Count { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public long StartIndex { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public sbyte Priority { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public short MinimumResults { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public ChanelRange ChannelRange { get { int o = __p.__offset(16); return o != 0 ? (ChanelRange)__p.bb.GetSbyte(o + __p.bb_pos) : ChanelRange.NONE; } }
  public LangCode LangCode { get { int o = __p.__offset(18); return o != 0 ? (LangCode)__p.bb.GetSbyte(o + __p.bb_pos) : LangCode.JA; } }
  public short DeviceType { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }

  public static Offset<NotificationReq> CreateNotificationReq(FlatBufferBuilder builder,
      SortBy sortBy = SortBy.INFO_ID,
      SortOrder sortOrder = SortOrder.ASC,
      short count = 0,
      long startIndex = 0,
      sbyte priority = 0,
      short minimumResults = 0,
      ChanelRange channelRange = ChanelRange.NONE,
      LangCode langCode = LangCode.JA,
      short deviceType = 0) {
    builder.StartObject(9);
    NotificationReq.AddStartIndex(builder, startIndex);
    NotificationReq.AddDeviceType(builder, deviceType);
    NotificationReq.AddMinimumResults(builder, minimumResults);
    NotificationReq.AddCount(builder, count);
    NotificationReq.AddLangCode(builder, langCode);
    NotificationReq.AddChannelRange(builder, channelRange);
    NotificationReq.AddPriority(builder, priority);
    NotificationReq.AddSortOrder(builder, sortOrder);
    NotificationReq.AddSortBy(builder, sortBy);
    return NotificationReq.EndNotificationReq(builder);
  }

  public static void StartNotificationReq(FlatBufferBuilder builder) { builder.StartObject(9); }
  public static void AddSortBy(FlatBufferBuilder builder, SortBy sortBy) { builder.AddSbyte(0, (sbyte)sortBy, 0); }
  public static void AddSortOrder(FlatBufferBuilder builder, SortOrder sortOrder) { builder.AddSbyte(1, (sbyte)sortOrder, 0); }
  public static void AddCount(FlatBufferBuilder builder, short count) { builder.AddShort(2, count, 0); }
  public static void AddStartIndex(FlatBufferBuilder builder, long startIndex) { builder.AddLong(3, startIndex, 0); }
  public static void AddPriority(FlatBufferBuilder builder, sbyte priority) { builder.AddSbyte(4, priority, 0); }
  public static void AddMinimumResults(FlatBufferBuilder builder, short minimumResults) { builder.AddShort(5, minimumResults, 0); }
  public static void AddChannelRange(FlatBufferBuilder builder, ChanelRange channelRange) { builder.AddSbyte(6, (sbyte)channelRange, 0); }
  public static void AddLangCode(FlatBufferBuilder builder, LangCode langCode) { builder.AddSbyte(7, (sbyte)langCode, 0); }
  public static void AddDeviceType(FlatBufferBuilder builder, short deviceType) { builder.AddShort(8, deviceType, 0); }
  public static Offset<NotificationReq> EndNotificationReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NotificationReq>(o);
  }
};

public struct CheatExpGillanJewelsReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CheatExpGillanJewelsReq GetRootAsCheatExpGillanJewelsReq(ByteBuffer _bb) { return GetRootAsCheatExpGillanJewelsReq(_bb, new CheatExpGillanJewelsReq()); }
  public static CheatExpGillanJewelsReq GetRootAsCheatExpGillanJewelsReq(ByteBuffer _bb, CheatExpGillanJewelsReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CheatExpGillanJewelsReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Experience { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int Gillan { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Jewels { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<CheatExpGillanJewelsReq> CreateCheatExpGillanJewelsReq(FlatBufferBuilder builder,
      long experience = 0,
      int gillan = 0,
      int jewels = 0) {
    builder.StartObject(3);
    CheatExpGillanJewelsReq.AddExperience(builder, experience);
    CheatExpGillanJewelsReq.AddJewels(builder, jewels);
    CheatExpGillanJewelsReq.AddGillan(builder, gillan);
    return CheatExpGillanJewelsReq.EndCheatExpGillanJewelsReq(builder);
  }

  public static void StartCheatExpGillanJewelsReq(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddExperience(FlatBufferBuilder builder, long experience) { builder.AddLong(0, experience, 0); }
  public static void AddGillan(FlatBufferBuilder builder, int gillan) { builder.AddInt(1, gillan, 0); }
  public static void AddJewels(FlatBufferBuilder builder, int jewels) { builder.AddInt(2, jewels, 0); }
  public static Offset<CheatExpGillanJewelsReq> EndCheatExpGillanJewelsReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CheatExpGillanJewelsReq>(o);
  }
};

public struct NightWalkerCreateReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NightWalkerCreateReq GetRootAsNightWalkerCreateReq(ByteBuffer _bb) { return GetRootAsNightWalkerCreateReq(_bb, new NightWalkerCreateReq()); }
  public static NightWalkerCreateReq GetRootAsNightWalkerCreateReq(ByteBuffer _bb, NightWalkerCreateReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NightWalkerCreateReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long MasterIds(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int MasterIdsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMasterIdsBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<NightWalkerCreateReq> CreateNightWalkerCreateReq(FlatBufferBuilder builder,
      VectorOffset masterIdsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    NightWalkerCreateReq.AddMasterIds(builder, masterIdsOffset);
    return NightWalkerCreateReq.EndNightWalkerCreateReq(builder);
  }

  public static void StartNightWalkerCreateReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddMasterIds(FlatBufferBuilder builder, VectorOffset masterIdsOffset) { builder.AddOffset(0, masterIdsOffset.Value, 0); }
  public static VectorOffset CreateMasterIdsVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartMasterIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<NightWalkerCreateReq> EndNightWalkerCreateReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NightWalkerCreateReq>(o);
  }
};

public struct NightWalkerLevelUpReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NightWalkerLevelUpReq GetRootAsNightWalkerLevelUpReq(ByteBuffer _bb) { return GetRootAsNightWalkerLevelUpReq(_bb, new NightWalkerLevelUpReq()); }
  public static NightWalkerLevelUpReq GetRootAsNightWalkerLevelUpReq(ByteBuffer _bb, NightWalkerLevelUpReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NightWalkerLevelUpReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long NightWalkerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Items(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ItemsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetItemsBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<NightWalkerLevelUpReq> CreateNightWalkerLevelUpReq(FlatBufferBuilder builder,
      long nightWalkerId = 0,
      VectorOffset itemsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    NightWalkerLevelUpReq.AddNightWalkerId(builder, nightWalkerId);
    NightWalkerLevelUpReq.AddItems(builder, itemsOffset);
    return NightWalkerLevelUpReq.EndNightWalkerLevelUpReq(builder);
  }

  public static void StartNightWalkerLevelUpReq(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddNightWalkerId(FlatBufferBuilder builder, long nightWalkerId) { builder.AddLong(0, nightWalkerId, 0); }
  public static void AddItems(FlatBufferBuilder builder, VectorOffset itemsOffset) { builder.AddOffset(1, itemsOffset.Value, 0); }
  public static VectorOffset CreateItemsVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<NightWalkerLevelUpReq> EndNightWalkerLevelUpReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NightWalkerLevelUpReq>(o);
  }
};

public struct NightWalkerSellReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NightWalkerSellReq GetRootAsNightWalkerSellReq(ByteBuffer _bb) { return GetRootAsNightWalkerSellReq(_bb, new NightWalkerSellReq()); }
  public static NightWalkerSellReq GetRootAsNightWalkerSellReq(ByteBuffer _bb, NightWalkerSellReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NightWalkerSellReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long NightWalkerId(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int NightWalkerIdLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetNightWalkerIdBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<NightWalkerSellReq> CreateNightWalkerSellReq(FlatBufferBuilder builder,
      VectorOffset nightWalkerIdOffset = default(VectorOffset)) {
    builder.StartObject(1);
    NightWalkerSellReq.AddNightWalkerId(builder, nightWalkerIdOffset);
    return NightWalkerSellReq.EndNightWalkerSellReq(builder);
  }

  public static void StartNightWalkerSellReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddNightWalkerId(FlatBufferBuilder builder, VectorOffset nightWalkerIdOffset) { builder.AddOffset(0, nightWalkerIdOffset.Value, 0); }
  public static VectorOffset CreateNightWalkerIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartNightWalkerIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<NightWalkerSellReq> EndNightWalkerSellReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NightWalkerSellReq>(o);
  }
};

public struct NightWalkerEquipReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NightWalkerEquipReq GetRootAsNightWalkerEquipReq(ByteBuffer _bb) { return GetRootAsNightWalkerEquipReq(_bb, new NightWalkerEquipReq()); }
  public static NightWalkerEquipReq GetRootAsNightWalkerEquipReq(ByteBuffer _bb, NightWalkerEquipReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NightWalkerEquipReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long NightWalkerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MainWeapon { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SubWeapon { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<NightWalkerEquipReq> CreateNightWalkerEquipReq(FlatBufferBuilder builder,
      long nightWalkerId = 0,
      long mainWeapon = 0,
      long subWeapon = 0) {
    builder.StartObject(3);
    NightWalkerEquipReq.AddSubWeapon(builder, subWeapon);
    NightWalkerEquipReq.AddMainWeapon(builder, mainWeapon);
    NightWalkerEquipReq.AddNightWalkerId(builder, nightWalkerId);
    return NightWalkerEquipReq.EndNightWalkerEquipReq(builder);
  }

  public static void StartNightWalkerEquipReq(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddNightWalkerId(FlatBufferBuilder builder, long nightWalkerId) { builder.AddLong(0, nightWalkerId, 0); }
  public static void AddMainWeapon(FlatBufferBuilder builder, long mainWeapon) { builder.AddLong(1, mainWeapon, 0); }
  public static void AddSubWeapon(FlatBufferBuilder builder, long subWeapon) { builder.AddLong(2, subWeapon, 0); }
  public static Offset<NightWalkerEquipReq> EndNightWalkerEquipReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NightWalkerEquipReq>(o);
  }
};

public struct NightWalkerUnEquipReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NightWalkerUnEquipReq GetRootAsNightWalkerUnEquipReq(ByteBuffer _bb) { return GetRootAsNightWalkerUnEquipReq(_bb, new NightWalkerUnEquipReq()); }
  public static NightWalkerUnEquipReq GetRootAsNightWalkerUnEquipReq(ByteBuffer _bb, NightWalkerUnEquipReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NightWalkerUnEquipReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long NightWalkerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MainWeapon { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SubWeapon { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<NightWalkerUnEquipReq> CreateNightWalkerUnEquipReq(FlatBufferBuilder builder,
      long nightWalkerId = 0,
      long mainWeapon = 0,
      long subWeapon = 0) {
    builder.StartObject(3);
    NightWalkerUnEquipReq.AddSubWeapon(builder, subWeapon);
    NightWalkerUnEquipReq.AddMainWeapon(builder, mainWeapon);
    NightWalkerUnEquipReq.AddNightWalkerId(builder, nightWalkerId);
    return NightWalkerUnEquipReq.EndNightWalkerUnEquipReq(builder);
  }

  public static void StartNightWalkerUnEquipReq(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddNightWalkerId(FlatBufferBuilder builder, long nightWalkerId) { builder.AddLong(0, nightWalkerId, 0); }
  public static void AddMainWeapon(FlatBufferBuilder builder, long mainWeapon) { builder.AddLong(1, mainWeapon, 0); }
  public static void AddSubWeapon(FlatBufferBuilder builder, long subWeapon) { builder.AddLong(2, subWeapon, 0); }
  public static Offset<NightWalkerUnEquipReq> EndNightWalkerUnEquipReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NightWalkerUnEquipReq>(o);
  }
};

public struct NightMareCreateReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NightMareCreateReq GetRootAsNightMareCreateReq(ByteBuffer _bb) { return GetRootAsNightMareCreateReq(_bb, new NightMareCreateReq()); }
  public static NightMareCreateReq GetRootAsNightMareCreateReq(ByteBuffer _bb, NightMareCreateReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NightMareCreateReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long MasterIds(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int MasterIdsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMasterIdsBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<NightMareCreateReq> CreateNightMareCreateReq(FlatBufferBuilder builder,
      VectorOffset masterIdsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    NightMareCreateReq.AddMasterIds(builder, masterIdsOffset);
    return NightMareCreateReq.EndNightMareCreateReq(builder);
  }

  public static void StartNightMareCreateReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddMasterIds(FlatBufferBuilder builder, VectorOffset masterIdsOffset) { builder.AddOffset(0, masterIdsOffset.Value, 0); }
  public static VectorOffset CreateMasterIdsVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartMasterIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<NightMareCreateReq> EndNightMareCreateReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NightMareCreateReq>(o);
  }
};

public struct NightMareSellReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NightMareSellReq GetRootAsNightMareSellReq(ByteBuffer _bb) { return GetRootAsNightMareSellReq(_bb, new NightMareSellReq()); }
  public static NightMareSellReq GetRootAsNightMareSellReq(ByteBuffer _bb, NightMareSellReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NightMareSellReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long NightMareId(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int NightMareIdLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetNightMareIdBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<NightMareSellReq> CreateNightMareSellReq(FlatBufferBuilder builder,
      VectorOffset nightMareIdOffset = default(VectorOffset)) {
    builder.StartObject(1);
    NightMareSellReq.AddNightMareId(builder, nightMareIdOffset);
    return NightMareSellReq.EndNightMareSellReq(builder);
  }

  public static void StartNightMareSellReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddNightMareId(FlatBufferBuilder builder, VectorOffset nightMareIdOffset) { builder.AddOffset(0, nightMareIdOffset.Value, 0); }
  public static VectorOffset CreateNightMareIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartNightMareIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<NightMareSellReq> EndNightMareSellReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NightMareSellReq>(o);
  }
};

public struct NightMareLevelUpReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NightMareLevelUpReq GetRootAsNightMareLevelUpReq(ByteBuffer _bb) { return GetRootAsNightMareLevelUpReq(_bb, new NightMareLevelUpReq()); }
  public static NightMareLevelUpReq GetRootAsNightMareLevelUpReq(ByteBuffer _bb, NightMareLevelUpReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NightMareLevelUpReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long NightMareId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Items(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ItemsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetItemsBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<NightMareLevelUpReq> CreateNightMareLevelUpReq(FlatBufferBuilder builder,
      long nightMareId = 0,
      VectorOffset itemsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    NightMareLevelUpReq.AddNightMareId(builder, nightMareId);
    NightMareLevelUpReq.AddItems(builder, itemsOffset);
    return NightMareLevelUpReq.EndNightMareLevelUpReq(builder);
  }

  public static void StartNightMareLevelUpReq(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddNightMareId(FlatBufferBuilder builder, long nightMareId) { builder.AddLong(0, nightMareId, 0); }
  public static void AddItems(FlatBufferBuilder builder, VectorOffset itemsOffset) { builder.AddOffset(1, itemsOffset.Value, 0); }
  public static VectorOffset CreateItemsVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartItemsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<NightMareLevelUpReq> EndNightMareLevelUpReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NightMareLevelUpReq>(o);
  }
};

public struct QuestStartReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static QuestStartReq GetRootAsQuestStartReq(ByteBuffer _bb) { return GetRootAsQuestStartReq(_bb, new QuestStartReq()); }
  public static QuestStartReq GetRootAsQuestStartReq(ByteBuffer _bb, QuestStartReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public QuestStartReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long MasterId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<QuestStartReq> CreateQuestStartReq(FlatBufferBuilder builder,
      long masterId = 0) {
    builder.StartObject(1);
    QuestStartReq.AddMasterId(builder, masterId);
    return QuestStartReq.EndQuestStartReq(builder);
  }

  public static void StartQuestStartReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddMasterId(FlatBufferBuilder builder, long masterId) { builder.AddLong(0, masterId, 0); }
  public static Offset<QuestStartReq> EndQuestStartReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<QuestStartReq>(o);
  }
};

public struct QuestCompleteReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static QuestCompleteReq GetRootAsQuestCompleteReq(ByteBuffer _bb) { return GetRootAsQuestCompleteReq(_bb, new QuestCompleteReq()); }
  public static QuestCompleteReq GetRootAsQuestCompleteReq(ByteBuffer _bb, QuestCompleteReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public QuestCompleteReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long MasterId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public QuestState Result { get { int o = __p.__offset(6); return o != 0 ? (QuestState)__p.bb.GetSbyte(o + __p.bb_pos) : QuestState.NONE; } }

  public static Offset<QuestCompleteReq> CreateQuestCompleteReq(FlatBufferBuilder builder,
      long masterId = 0,
      QuestState result = QuestState.NONE) {
    builder.StartObject(2);
    QuestCompleteReq.AddMasterId(builder, masterId);
    QuestCompleteReq.AddResult(builder, result);
    return QuestCompleteReq.EndQuestCompleteReq(builder);
  }

  public static void StartQuestCompleteReq(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddMasterId(FlatBufferBuilder builder, long masterId) { builder.AddLong(0, masterId, 0); }
  public static void AddResult(FlatBufferBuilder builder, QuestState result) { builder.AddSbyte(1, (sbyte)result, 0); }
  public static Offset<QuestCompleteReq> EndQuestCompleteReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<QuestCompleteReq>(o);
  }
};

public struct QuestGiftClaimReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static QuestGiftClaimReq GetRootAsQuestGiftClaimReq(ByteBuffer _bb) { return GetRootAsQuestGiftClaimReq(_bb, new QuestGiftClaimReq()); }
  public static QuestGiftClaimReq GetRootAsQuestGiftClaimReq(ByteBuffer _bb, QuestGiftClaimReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public QuestGiftClaimReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long MasterId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<QuestGiftClaimReq> CreateQuestGiftClaimReq(FlatBufferBuilder builder,
      long masterId = 0) {
    builder.StartObject(1);
    QuestGiftClaimReq.AddMasterId(builder, masterId);
    return QuestGiftClaimReq.EndQuestGiftClaimReq(builder);
  }

  public static void StartQuestGiftClaimReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddMasterId(FlatBufferBuilder builder, long masterId) { builder.AddLong(0, masterId, 0); }
  public static Offset<QuestGiftClaimReq> EndQuestGiftClaimReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<QuestGiftClaimReq>(o);
  }
};

public struct PresentClaimReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PresentClaimReq GetRootAsPresentClaimReq(ByteBuffer _bb) { return GetRootAsPresentClaimReq(_bb, new PresentClaimReq()); }
  public static PresentClaimReq GetRootAsPresentClaimReq(ByteBuffer _bb, PresentClaimReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PresentClaimReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long PresentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<PresentClaimReq> CreatePresentClaimReq(FlatBufferBuilder builder,
      long presentId = 0) {
    builder.StartObject(1);
    PresentClaimReq.AddPresentId(builder, presentId);
    return PresentClaimReq.EndPresentClaimReq(builder);
  }

  public static void StartPresentClaimReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddPresentId(FlatBufferBuilder builder, long presentId) { builder.AddLong(0, presentId, 0); }
  public static Offset<PresentClaimReq> EndPresentClaimReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PresentClaimReq>(o);
  }
};

public struct CheatCompleteQuestReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CheatCompleteQuestReq GetRootAsCheatCompleteQuestReq(ByteBuffer _bb) { return GetRootAsCheatCompleteQuestReq(_bb, new CheatCompleteQuestReq()); }
  public static CheatCompleteQuestReq GetRootAsCheatCompleteQuestReq(ByteBuffer _bb, CheatCompleteQuestReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CheatCompleteQuestReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long RequestId(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int RequestIdLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetRequestIdBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<CheatCompleteQuestReq> CreateCheatCompleteQuestReq(FlatBufferBuilder builder,
      VectorOffset requestIdOffset = default(VectorOffset)) {
    builder.StartObject(1);
    CheatCompleteQuestReq.AddRequestId(builder, requestIdOffset);
    return CheatCompleteQuestReq.EndCheatCompleteQuestReq(builder);
  }

  public static void StartCheatCompleteQuestReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddRequestId(FlatBufferBuilder builder, VectorOffset requestIdOffset) { builder.AddOffset(0, requestIdOffset.Value, 0); }
  public static VectorOffset CreateRequestIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartRequestIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<CheatCompleteQuestReq> EndCheatCompleteQuestReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CheatCompleteQuestReq>(o);
  }
};

public struct CheatSendPresentReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CheatSendPresentReq GetRootAsCheatSendPresentReq(ByteBuffer _bb) { return GetRootAsCheatSendPresentReq(_bb, new CheatSendPresentReq()); }
  public static CheatSendPresentReq GetRootAsCheatSendPresentReq(ByteBuffer _bb, CheatSendPresentReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CheatSendPresentReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long IdOfIcon { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ItemIds(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ItemIdsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetItemIdsBytes() { return __p.__vector_as_arraysegment(6); }
  public long WeaponIds(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int WeaponIdsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetWeaponIdsBytes() { return __p.__vector_as_arraysegment(8); }
  public long MaterialIds(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int MaterialIdsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMaterialIdsBytes() { return __p.__vector_as_arraysegment(10); }
  public long NightWalkerIds(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int NightWalkerIdsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetNightWalkerIdsBytes() { return __p.__vector_as_arraysegment(12); }
  public long NightmareIds(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int NightmareIdsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetNightmareIdsBytes() { return __p.__vector_as_arraysegment(14); }

  public static Offset<CheatSendPresentReq> CreateCheatSendPresentReq(FlatBufferBuilder builder,
      long idOfIcon = 0,
      VectorOffset itemIdsOffset = default(VectorOffset),
      VectorOffset weaponIdsOffset = default(VectorOffset),
      VectorOffset materialIdsOffset = default(VectorOffset),
      VectorOffset nightWalkerIdsOffset = default(VectorOffset),
      VectorOffset nightmareIdsOffset = default(VectorOffset)) {
    builder.StartObject(6);
    CheatSendPresentReq.AddIdOfIcon(builder, idOfIcon);
    CheatSendPresentReq.AddNightmareIds(builder, nightmareIdsOffset);
    CheatSendPresentReq.AddNightWalkerIds(builder, nightWalkerIdsOffset);
    CheatSendPresentReq.AddMaterialIds(builder, materialIdsOffset);
    CheatSendPresentReq.AddWeaponIds(builder, weaponIdsOffset);
    CheatSendPresentReq.AddItemIds(builder, itemIdsOffset);
    return CheatSendPresentReq.EndCheatSendPresentReq(builder);
  }

  public static void StartCheatSendPresentReq(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddIdOfIcon(FlatBufferBuilder builder, long idOfIcon) { builder.AddLong(0, idOfIcon, 0); }
  public static void AddItemIds(FlatBufferBuilder builder, VectorOffset itemIdsOffset) { builder.AddOffset(1, itemIdsOffset.Value, 0); }
  public static VectorOffset CreateItemIdsVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartItemIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddWeaponIds(FlatBufferBuilder builder, VectorOffset weaponIdsOffset) { builder.AddOffset(2, weaponIdsOffset.Value, 0); }
  public static VectorOffset CreateWeaponIdsVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartWeaponIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddMaterialIds(FlatBufferBuilder builder, VectorOffset materialIdsOffset) { builder.AddOffset(3, materialIdsOffset.Value, 0); }
  public static VectorOffset CreateMaterialIdsVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartMaterialIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddNightWalkerIds(FlatBufferBuilder builder, VectorOffset nightWalkerIdsOffset) { builder.AddOffset(4, nightWalkerIdsOffset.Value, 0); }
  public static VectorOffset CreateNightWalkerIdsVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartNightWalkerIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddNightmareIds(FlatBufferBuilder builder, VectorOffset nightmareIdsOffset) { builder.AddOffset(5, nightmareIdsOffset.Value, 0); }
  public static VectorOffset CreateNightmareIdsVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartNightmareIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<CheatSendPresentReq> EndCheatSendPresentReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CheatSendPresentReq>(o);
  }
};

public struct CheatNightWalkerSkinReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CheatNightWalkerSkinReq GetRootAsCheatNightWalkerSkinReq(ByteBuffer _bb) { return GetRootAsCheatNightWalkerSkinReq(_bb, new CheatNightWalkerSkinReq()); }
  public static CheatNightWalkerSkinReq GetRootAsCheatNightWalkerSkinReq(ByteBuffer _bb, CheatNightWalkerSkinReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CheatNightWalkerSkinReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long NightWalkerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SkinIds(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int SkinIdsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetSkinIdsBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<CheatNightWalkerSkinReq> CreateCheatNightWalkerSkinReq(FlatBufferBuilder builder,
      long nightWalkerId = 0,
      VectorOffset skinIdsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    CheatNightWalkerSkinReq.AddNightWalkerId(builder, nightWalkerId);
    CheatNightWalkerSkinReq.AddSkinIds(builder, skinIdsOffset);
    return CheatNightWalkerSkinReq.EndCheatNightWalkerSkinReq(builder);
  }

  public static void StartCheatNightWalkerSkinReq(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddNightWalkerId(FlatBufferBuilder builder, long nightWalkerId) { builder.AddLong(0, nightWalkerId, 0); }
  public static void AddSkinIds(FlatBufferBuilder builder, VectorOffset skinIdsOffset) { builder.AddOffset(1, skinIdsOffset.Value, 0); }
  public static VectorOffset CreateSkinIdsVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartSkinIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<CheatNightWalkerSkinReq> EndCheatNightWalkerSkinReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CheatNightWalkerSkinReq>(o);
  }
};

public struct CheatGrowthBroadApReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CheatGrowthBroadApReq GetRootAsCheatGrowthBroadApReq(ByteBuffer _bb) { return GetRootAsCheatGrowthBroadApReq(_bb, new CheatGrowthBroadApReq()); }
  public static CheatGrowthBroadApReq GetRootAsCheatGrowthBroadApReq(ByteBuffer _bb, CheatGrowthBroadApReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CheatGrowthBroadApReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GrowthBroadId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Ap { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<CheatGrowthBroadApReq> CreateCheatGrowthBroadApReq(FlatBufferBuilder builder,
      long growthBroadId = 0,
      long ap = 0) {
    builder.StartObject(2);
    CheatGrowthBroadApReq.AddAp(builder, ap);
    CheatGrowthBroadApReq.AddGrowthBroadId(builder, growthBroadId);
    return CheatGrowthBroadApReq.EndCheatGrowthBroadApReq(builder);
  }

  public static void StartCheatGrowthBroadApReq(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddGrowthBroadId(FlatBufferBuilder builder, long growthBroadId) { builder.AddLong(0, growthBroadId, 0); }
  public static void AddAp(FlatBufferBuilder builder, long ap) { builder.AddLong(1, ap, 0); }
  public static Offset<CheatGrowthBroadApReq> EndCheatGrowthBroadApReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CheatGrowthBroadApReq>(o);
  }
};

public struct NightWalkerExtraGrowthBroadReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NightWalkerExtraGrowthBroadReq GetRootAsNightWalkerExtraGrowthBroadReq(ByteBuffer _bb) { return GetRootAsNightWalkerExtraGrowthBroadReq(_bb, new NightWalkerExtraGrowthBroadReq()); }
  public static NightWalkerExtraGrowthBroadReq GetRootAsNightWalkerExtraGrowthBroadReq(ByteBuffer _bb, NightWalkerExtraGrowthBroadReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NightWalkerExtraGrowthBroadReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<NightWalkerExtraGrowthBroadReq> CreateNightWalkerExtraGrowthBroadReq(FlatBufferBuilder builder,
      int index = 0) {
    builder.StartObject(1);
    NightWalkerExtraGrowthBroadReq.AddIndex(builder, index);
    return NightWalkerExtraGrowthBroadReq.EndNightWalkerExtraGrowthBroadReq(builder);
  }

  public static void StartNightWalkerExtraGrowthBroadReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddIndex(FlatBufferBuilder builder, int index) { builder.AddInt(0, index, 0); }
  public static Offset<NightWalkerExtraGrowthBroadReq> EndNightWalkerExtraGrowthBroadReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NightWalkerExtraGrowthBroadReq>(o);
  }
};

public struct PartyDeleteReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PartyDeleteReq GetRootAsPartyDeleteReq(ByteBuffer _bb) { return GetRootAsPartyDeleteReq(_bb, new PartyDeleteReq()); }
  public static PartyDeleteReq GetRootAsPartyDeleteReq(ByteBuffer _bb, PartyDeleteReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PartyDeleteReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sbyte PartyNo { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }

  public static Offset<PartyDeleteReq> CreatePartyDeleteReq(FlatBufferBuilder builder,
      sbyte partyNo = 0) {
    builder.StartObject(1);
    PartyDeleteReq.AddPartyNo(builder, partyNo);
    return PartyDeleteReq.EndPartyDeleteReq(builder);
  }

  public static void StartPartyDeleteReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddPartyNo(FlatBufferBuilder builder, sbyte partyNo) { builder.AddSbyte(0, partyNo, 0); }
  public static Offset<PartyDeleteReq> EndPartyDeleteReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PartyDeleteReq>(o);
  }
};

public struct CheatItemsReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CheatItemsReq GetRootAsCheatItemsReq(ByteBuffer _bb) { return GetRootAsCheatItemsReq(_bb, new CheatItemsReq()); }
  public static CheatItemsReq GetRootAsCheatItemsReq(ByteBuffer _bb, CheatItemsReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CheatItemsReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long MItemIds(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int MItemIdsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMItemIdsBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<CheatItemsReq> CreateCheatItemsReq(FlatBufferBuilder builder,
      VectorOffset mItemIdsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    CheatItemsReq.AddMItemIds(builder, mItemIdsOffset);
    return CheatItemsReq.EndCheatItemsReq(builder);
  }

  public static void StartCheatItemsReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddMItemIds(FlatBufferBuilder builder, VectorOffset mItemIdsOffset) { builder.AddOffset(0, mItemIdsOffset.Value, 0); }
  public static VectorOffset CreateMItemIdsVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartMItemIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<CheatItemsReq> EndCheatItemsReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CheatItemsReq>(o);
  }
};

public struct WeaponCreateReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static WeaponCreateReq GetRootAsWeaponCreateReq(ByteBuffer _bb) { return GetRootAsWeaponCreateReq(_bb, new WeaponCreateReq()); }
  public static WeaponCreateReq GetRootAsWeaponCreateReq(ByteBuffer _bb, WeaponCreateReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public WeaponCreateReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long MasterId(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int MasterIdLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMasterIdBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<WeaponCreateReq> CreateWeaponCreateReq(FlatBufferBuilder builder,
      VectorOffset masterIdOffset = default(VectorOffset)) {
    builder.StartObject(1);
    WeaponCreateReq.AddMasterId(builder, masterIdOffset);
    return WeaponCreateReq.EndWeaponCreateReq(builder);
  }

  public static void StartWeaponCreateReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddMasterId(FlatBufferBuilder builder, VectorOffset masterIdOffset) { builder.AddOffset(0, masterIdOffset.Value, 0); }
  public static VectorOffset CreateMasterIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartMasterIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<WeaponCreateReq> EndWeaponCreateReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<WeaponCreateReq>(o);
  }
};

public struct WeaponSellReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static WeaponSellReq GetRootAsWeaponSellReq(ByteBuffer _bb) { return GetRootAsWeaponSellReq(_bb, new WeaponSellReq()); }
  public static WeaponSellReq GetRootAsWeaponSellReq(ByteBuffer _bb, WeaponSellReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public WeaponSellReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long WeaponId(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int WeaponIdLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetWeaponIdBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<WeaponSellReq> CreateWeaponSellReq(FlatBufferBuilder builder,
      VectorOffset weaponIdOffset = default(VectorOffset)) {
    builder.StartObject(1);
    WeaponSellReq.AddWeaponId(builder, weaponIdOffset);
    return WeaponSellReq.EndWeaponSellReq(builder);
  }

  public static void StartWeaponSellReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddWeaponId(FlatBufferBuilder builder, VectorOffset weaponIdOffset) { builder.AddOffset(0, weaponIdOffset.Value, 0); }
  public static VectorOffset CreateWeaponIdVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartWeaponIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<WeaponSellReq> EndWeaponSellReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<WeaponSellReq>(o);
  }
};

public struct WeaponLockReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static WeaponLockReq GetRootAsWeaponLockReq(ByteBuffer _bb) { return GetRootAsWeaponLockReq(_bb, new WeaponLockReq()); }
  public static WeaponLockReq GetRootAsWeaponLockReq(ByteBuffer _bb, WeaponLockReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public WeaponLockReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long WeaponId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<WeaponLockReq> CreateWeaponLockReq(FlatBufferBuilder builder,
      long weaponId = 0) {
    builder.StartObject(1);
    WeaponLockReq.AddWeaponId(builder, weaponId);
    return WeaponLockReq.EndWeaponLockReq(builder);
  }

  public static void StartWeaponLockReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddWeaponId(FlatBufferBuilder builder, long weaponId) { builder.AddLong(0, weaponId, 0); }
  public static Offset<WeaponLockReq> EndWeaponLockReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<WeaponLockReq>(o);
  }
};

public struct WeaponUnLockReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static WeaponUnLockReq GetRootAsWeaponUnLockReq(ByteBuffer _bb) { return GetRootAsWeaponUnLockReq(_bb, new WeaponUnLockReq()); }
  public static WeaponUnLockReq GetRootAsWeaponUnLockReq(ByteBuffer _bb, WeaponUnLockReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public WeaponUnLockReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long WeaponId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<WeaponUnLockReq> CreateWeaponUnLockReq(FlatBufferBuilder builder,
      long weaponId = 0) {
    builder.StartObject(1);
    WeaponUnLockReq.AddWeaponId(builder, weaponId);
    return WeaponUnLockReq.EndWeaponUnLockReq(builder);
  }

  public static void StartWeaponUnLockReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddWeaponId(FlatBufferBuilder builder, long weaponId) { builder.AddLong(0, weaponId, 0); }
  public static Offset<WeaponUnLockReq> EndWeaponUnLockReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<WeaponUnLockReq>(o);
  }
};

public struct Material : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Material GetRootAsMaterial(ByteBuffer _bb) { return GetRootAsMaterial(_bb, new Material()); }
  public static Material GetRootAsMaterial(ByteBuffer _bb, Material obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Material __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int Amount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Material> CreateMaterial(FlatBufferBuilder builder,
      long id = 0,
      int amount = 0) {
    builder.StartObject(2);
    Material.AddId(builder, id);
    Material.AddAmount(builder, amount);
    return Material.EndMaterial(builder);
  }

  public static void StartMaterial(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddAmount(FlatBufferBuilder builder, int amount) { builder.AddInt(1, amount, 0); }
  public static Offset<Material> EndMaterial(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Material>(o);
  }
};

public struct WeaponLevelUpReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static WeaponLevelUpReq GetRootAsWeaponLevelUpReq(ByteBuffer _bb) { return GetRootAsWeaponLevelUpReq(_bb, new WeaponLevelUpReq()); }
  public static WeaponLevelUpReq GetRootAsWeaponLevelUpReq(ByteBuffer _bb, WeaponLevelUpReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public WeaponLevelUpReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long WeaponId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Material? Materials(int j) { int o = __p.__offset(6); return o != 0 ? (Material?)(new Material()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MaterialsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<WeaponLevelUpReq> CreateWeaponLevelUpReq(FlatBufferBuilder builder,
      long weaponId = 0,
      VectorOffset materialsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    WeaponLevelUpReq.AddWeaponId(builder, weaponId);
    WeaponLevelUpReq.AddMaterials(builder, materialsOffset);
    return WeaponLevelUpReq.EndWeaponLevelUpReq(builder);
  }

  public static void StartWeaponLevelUpReq(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddWeaponId(FlatBufferBuilder builder, long weaponId) { builder.AddLong(0, weaponId, 0); }
  public static void AddMaterials(FlatBufferBuilder builder, VectorOffset materialsOffset) { builder.AddOffset(1, materialsOffset.Value, 0); }
  public static VectorOffset CreateMaterialsVector(FlatBufferBuilder builder, Offset<Material>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMaterialsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WeaponLevelUpReq> EndWeaponLevelUpReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<WeaponLevelUpReq>(o);
  }
};

public struct CheatNightWalkerSkillReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CheatNightWalkerSkillReq GetRootAsCheatNightWalkerSkillReq(ByteBuffer _bb) { return GetRootAsCheatNightWalkerSkillReq(_bb, new CheatNightWalkerSkillReq()); }
  public static CheatNightWalkerSkillReq GetRootAsCheatNightWalkerSkillReq(ByteBuffer _bb, CheatNightWalkerSkillReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CheatNightWalkerSkillReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long NightWalkerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MSkill(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int MSkillLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMSkillBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<CheatNightWalkerSkillReq> CreateCheatNightWalkerSkillReq(FlatBufferBuilder builder,
      long nightWalkerId = 0,
      VectorOffset mSkillOffset = default(VectorOffset)) {
    builder.StartObject(2);
    CheatNightWalkerSkillReq.AddNightWalkerId(builder, nightWalkerId);
    CheatNightWalkerSkillReq.AddMSkill(builder, mSkillOffset);
    return CheatNightWalkerSkillReq.EndCheatNightWalkerSkillReq(builder);
  }

  public static void StartCheatNightWalkerSkillReq(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddNightWalkerId(FlatBufferBuilder builder, long nightWalkerId) { builder.AddLong(0, nightWalkerId, 0); }
  public static void AddMSkill(FlatBufferBuilder builder, VectorOffset mSkillOffset) { builder.AddOffset(1, mSkillOffset.Value, 0); }
  public static VectorOffset CreateMSkillVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartMSkillVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<CheatNightWalkerSkillReq> EndCheatNightWalkerSkillReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CheatNightWalkerSkillReq>(o);
  }
};

public struct CheatNightmareSkillReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CheatNightmareSkillReq GetRootAsCheatNightmareSkillReq(ByteBuffer _bb) { return GetRootAsCheatNightmareSkillReq(_bb, new CheatNightmareSkillReq()); }
  public static CheatNightmareSkillReq GetRootAsCheatNightmareSkillReq(ByteBuffer _bb, CheatNightmareSkillReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CheatNightmareSkillReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long NightmareId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MSkill(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int MSkillLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetMSkillBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<CheatNightmareSkillReq> CreateCheatNightmareSkillReq(FlatBufferBuilder builder,
      long nightmareId = 0,
      VectorOffset mSkillOffset = default(VectorOffset)) {
    builder.StartObject(2);
    CheatNightmareSkillReq.AddNightmareId(builder, nightmareId);
    CheatNightmareSkillReq.AddMSkill(builder, mSkillOffset);
    return CheatNightmareSkillReq.EndCheatNightmareSkillReq(builder);
  }

  public static void StartCheatNightmareSkillReq(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddNightmareId(FlatBufferBuilder builder, long nightmareId) { builder.AddLong(0, nightmareId, 0); }
  public static void AddMSkill(FlatBufferBuilder builder, VectorOffset mSkillOffset) { builder.AddOffset(1, mSkillOffset.Value, 0); }
  public static VectorOffset CreateMSkillVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static void StartMSkillVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<CheatNightmareSkillReq> EndCheatNightmareSkillReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CheatNightmareSkillReq>(o);
  }
};


}
