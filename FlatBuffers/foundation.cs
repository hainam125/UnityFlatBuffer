// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace com.gnt.flatbuffers
{

using global::System;
using global::FlatBuffers;

public enum MsgType : sbyte
{
 NONE = 0,
 REQ = 1,
 RESP = 2,
 RESP_ACK = 3,
 COMM = 4,
 NOTIFY = 5,
 NOTIFY_ACK = 6,
 SYS = 7,
};

public enum Cmd : sbyte
{
 NONE = 0,
 AUTH = 1,
 PING = 2,
 CLOSE = 3,
 API = 4,
 OPERATOR = 5,
};

public enum SubCmd : short
{
 NONE = 0,
 PING = 1,
 SYNC_BEGIN = 1000,
 SYNC_TIME = 1001,
 SYNC_END = 1100,
 USER_BEGIN = 1101,
 USER_LOGIN = 1102,
 USER_CHANGE_NICKNAME = 1103,
 USER_SYNC_DATA = 1104,
 OPEN_MAX_ITEM_BOX = 1105,
 OPEN_MAX_MATERIAL_BOX = 1106,
 OPEN_MAX_WEAPON_BOX = 1107,
 OPEN_MAX_NIGHTMARE_BOX = 1108,
 OPEN_MAX_NIGHT_WALKER_BOX = 1109,
 USER_END = 1200,
 MASTER_DATA_BEGIN = 1201,
 MASTER_DATA_CHECKSUM = 1202,
 MASTER_DATA_END = 1300,
 NIGHT_WALKER_BEGIN = 1301,
 NIGHT_WALKER_CREATE = 1302,
 NIGHT_WALKER_SELL = 1303,
 NIGHT_WALKER_LEVEL_UP = 1304,
 NIGHT_WALKER_EQUIP = 1305,
 NIGHT_WALKER_UN_EQUIP = 1306,
 NIGHT_WALKER_EXT_GROWTH_BROAD = 1307,
 NIGHT_WALKER_END = 1400,
 NIGHTMARE_BEGIN = 1401,
 NIGHT_MARE_CREATE = 1402,
 NIGHT_MARE_SELL = 1403,
 NIGHT_MARE_LEVEL_UP = 1404,
 NIGHTMARE_END = 1500,
 PARTY_BEGIN = 1501,
 PARTY_UPDATE = 1502,
 PARTY_DELETE = 1503,
 PARTY_END = 1600,
 BRIDGE_BEGIN = 1601,
 BRIDGE_PEOPLE_GET = 1602,
 BRIDGE_PEOPLE_UPDATE = 1603,
 BRIDGE_COIN_DEPOSIT_IOS_CREATE = 1604,
 BRIDGE_COIN_DEPOSIT_ANDROID_CREATE = 1605,
 BRIDGE_COIN_DEPOSIT_IOS_UPDATE = 1606,
 BRIDGE_COIN_DEPOSIT_ANDROID_UPDATE = 1607,
 BRIDGE_END = 1700,
 INVITE_BEGIN = 1701,
 INVITE_CREATE = 1702,
 SHORT_INVITE_CREATE = 1703,
 INVITE_REWARD = 1704,
 INVITE_END = 1800,
 SERIAL_CODE_BEGIN = 1801,
 SERIAL_CODE_REWARD = 1802,
 CSERIAL_CODE_REWARD = 1803,
 SERIAL_CODE_END = 1900,
 PIN_CODE_BEGIN = 1901,
 PIN_CODE_CREATE = 1902,
 PIN_CODE_DELETE = 1903,
 PIN_CODE_UPDATE = 1904,
 PIN_CODE_GET = 1905,
 PIN_CODE_END = 2000,
 NOTIFICATION_BEGIN = 2001,
 NOTIFICATION_GET = 2002,
 NOTIFICATION_DETAIL_GET = 2003,
 NOTIFICATION_END = 2100,
 WEAPON_BEGIN = 2101,
 WEAPON_CREATE = 2102,
 WEAPON_SELL = 2103,
 WEAPON_LOCK = 2104,
 WEAPON_UNLOCK = 2105,
 WEAPON_LEVEL_UP = 2106,
 WEAPON_END = 2200,
 QUEST_BEGIN = 2201,
 QUEST_START = 2202,
 QUEST_COMPLETE = 2203,
 QUEST_GIFT_CLAIM = 2204,
 QUEST_END = 2300,
 PRESENT_BEGIN = 2301,
 PRESENT_CLAIM = 2302,
 PRESENT_CLAIM_ALL = 2303,
 PRESENT_CLAIM_ALL_EXCEPT_NWM = 2304,
 PRESENT_END = 2400,
 CHEAT_BEGIN = 9901,
 CHEAT_NIGHT_WALKER_CREATE = 9902,
 CHEAT_NIGHT_WALKER_DELETE = 9903,
 CHEAT_NIGHT_WALKER_LEVEL_UP = 9904,
 CHEAT_NIGHT_MARE_CREATE = 9905,
 CHEAT_NIGHT_MARE_DELETE = 9906,
 CHEAT_NIGHT_MARE_LEVEL_UP = 9907,
 CHEAT_ADD_COIN_FREE = 9908,
 CHEAT_CONSUME_COIN_FREE = 9909,
 CHEAT_CONSUME_COIN_PURCHASE = 9910,
 CHEAT_EXP_GILLAN_JEWELS = 9911,
 CHEAT_COMPLETE_QUEST = 9912,
 CHEAT_SEND_PRESENT = 9913,
 CHEAT_NIGHT_WALKER_SKIN = 9914,
 CHEAT_GROWTH_BROAD_AP = 9915,
 CHEAT_ITEMS = 9916,
 CHEAT_NIGHT_WALKER_SKILL = 9917,
 CHEAT_NIGHTMARE_SKILL = 9918,
 CHEAT_END = 10000,
};

public enum ErrorCode : short
{
 NONE = 0,
 AUTH_FAIL = 1,
 SOCKET_DISCONNECT = 30,
 SOCKET_REQUEST_TIME_OUT = 31,
 SOCKET_KICK_BY_ANOTHER = 32,
 SOCKET_SWITCH_SERVER = 33,
 SOCKET_MAINTAINED_SERVER = 34,
 SOCKET_FORCE_UPDATE = 35,
 SOCKET_TOKEN_TIME_OUT = 36,
 NOT_FOUND = 404,
 INVALID_MSG = 509,
};

public enum LoginMethod : int
{
 NONE = 0,
 GMAIL = 1,
 TWITTER = 2,
 FACEBOOK = 3,
 LINE = 4,
};

public enum AnyMsg : byte
{
 NONE = 0,
 ApiReq = 1,
 ApiResp = 2,
};

public struct ApiReq : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ApiReq GetRootAsApiReq(ByteBuffer _bb) { return GetRootAsApiReq(_bb, new ApiReq()); }
  public static ApiReq GetRootAsApiReq(ByteBuffer _bb, ApiReq obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ApiReq __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Data(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<ApiReq> CreateApiReq(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartObject(1);
    ApiReq.AddData(builder, dataOffset);
    return ApiReq.EndApiReq(builder);
  }

  public static void StartApiReq(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<ApiReq> EndApiReq(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ApiReq>(o);
  }
};

public struct ApiResp : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ApiResp GetRootAsApiResp(ByteBuffer _bb) { return GetRootAsApiResp(_bb, new ApiResp()); }
  public static ApiResp GetRootAsApiResp(ByteBuffer _bb, ApiResp obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ApiResp __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short Status { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public long Time { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public sbyte Response(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int ResponseLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetResponseBytes() { return __p.__vector_as_arraysegment(8); }
  public sbyte UserData(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int UserDataLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetUserDataBytes() { return __p.__vector_as_arraysegment(10); }

  public static Offset<ApiResp> CreateApiResp(FlatBufferBuilder builder,
      short status = 0,
      long time = 0,
      VectorOffset responseOffset = default(VectorOffset),
      VectorOffset userDataOffset = default(VectorOffset)) {
    builder.StartObject(4);
    ApiResp.AddTime(builder, time);
    ApiResp.AddUserData(builder, userDataOffset);
    ApiResp.AddResponse(builder, responseOffset);
    ApiResp.AddStatus(builder, status);
    return ApiResp.EndApiResp(builder);
  }

  public static void StartApiResp(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddStatus(FlatBufferBuilder builder, short status) { builder.AddShort(0, status, 0); }
  public static void AddTime(FlatBufferBuilder builder, long time) { builder.AddLong(1, time, 0); }
  public static void AddResponse(FlatBufferBuilder builder, VectorOffset responseOffset) { builder.AddOffset(2, responseOffset.Value, 0); }
  public static VectorOffset CreateResponseVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static void StartResponseVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddUserData(FlatBufferBuilder builder, VectorOffset userDataOffset) { builder.AddOffset(3, userDataOffset.Value, 0); }
  public static VectorOffset CreateUserDataVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static void StartUserDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<ApiResp> EndApiResp(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ApiResp>(o);
  }
};

public struct UpsertedData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static UpsertedData GetRootAsUpsertedData(ByteBuffer _bb) { return GetRootAsUpsertedData(_bb, new UpsertedData()); }
  public static UpsertedData GetRootAsUpsertedData(ByteBuffer _bb, UpsertedData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public UpsertedData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Type { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(4); }
  public sbyte Data(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int DataLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<UpsertedData> CreateUpsertedData(FlatBufferBuilder builder,
      StringOffset typeOffset = default(StringOffset),
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartObject(2);
    UpsertedData.AddData(builder, dataOffset);
    UpsertedData.AddType(builder, typeOffset);
    return UpsertedData.EndUpsertedData(builder);
  }

  public static void StartUpsertedData(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(0, typeOffset.Value, 0); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(1, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<UpsertedData> EndUpsertedData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<UpsertedData>(o);
  }
};

public struct DeletedData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DeletedData GetRootAsDeletedData(ByteBuffer _bb) { return GetRootAsDeletedData(_bb, new DeletedData()); }
  public static DeletedData GetRootAsDeletedData(ByteBuffer _bb, DeletedData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DeletedData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Type { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(4); }
  public long Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<DeletedData> CreateDeletedData(FlatBufferBuilder builder,
      StringOffset typeOffset = default(StringOffset),
      long id = 0) {
    builder.StartObject(2);
    DeletedData.AddId(builder, id);
    DeletedData.AddType(builder, typeOffset);
    return DeletedData.EndDeletedData(builder);
  }

  public static void StartDeletedData(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(0, typeOffset.Value, 0); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(1, id, 0); }
  public static Offset<DeletedData> EndDeletedData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DeletedData>(o);
  }
};

public struct UserData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static UserData GetRootAsUserData(ByteBuffer _bb) { return GetRootAsUserData(_bb, new UserData()); }
  public static UserData GetRootAsUserData(ByteBuffer _bb, UserData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public UserData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public UpsertedData? Upserted(int j) { int o = __p.__offset(4); return o != 0 ? (UpsertedData?)(new UpsertedData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UpsertedLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public DeletedData? Deleted(int j) { int o = __p.__offset(6); return o != 0 ? (DeletedData?)(new DeletedData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DeletedLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<UserData> CreateUserData(FlatBufferBuilder builder,
      VectorOffset upsertedOffset = default(VectorOffset),
      VectorOffset deletedOffset = default(VectorOffset)) {
    builder.StartObject(2);
    UserData.AddDeleted(builder, deletedOffset);
    UserData.AddUpserted(builder, upsertedOffset);
    return UserData.EndUserData(builder);
  }

  public static void StartUserData(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddUpserted(FlatBufferBuilder builder, VectorOffset upsertedOffset) { builder.AddOffset(0, upsertedOffset.Value, 0); }
  public static VectorOffset CreateUpsertedVector(FlatBufferBuilder builder, Offset<UpsertedData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartUpsertedVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDeleted(FlatBufferBuilder builder, VectorOffset deletedOffset) { builder.AddOffset(1, deletedOffset.Value, 0); }
  public static VectorOffset CreateDeletedVector(FlatBufferBuilder builder, Offset<DeletedData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartDeletedVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<UserData> EndUserData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<UserData>(o);
  }
};

public struct ApiMsg : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ApiMsg GetRootAsApiMsg(ByteBuffer _bb) { return GetRootAsApiMsg(_bb, new ApiMsg()); }
  public static ApiMsg GetRootAsApiMsg(ByteBuffer _bb, ApiMsg obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ApiMsg __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UserId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int MsgId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool NeedAck { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public MsgType MsgType { get { int o = __p.__offset(10); return o != 0 ? (MsgType)__p.bb.GetSbyte(o + __p.bb_pos) : MsgType.NONE; } }
  public Cmd Cmd { get { int o = __p.__offset(12); return o != 0 ? (Cmd)__p.bb.GetSbyte(o + __p.bb_pos) : Cmd.NONE; } }
  public short SubCmd { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public short Error { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public AnyMsg DataType { get { int o = __p.__offset(18); return o != 0 ? (AnyMsg)__p.bb.Get(o + __p.bb_pos) : AnyMsg.NONE; } }
  public TTable? Data<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(20); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<ApiMsg> CreateApiMsg(FlatBufferBuilder builder,
      long userId = 0,
      int msgId = 0,
      bool needAck = false,
      MsgType msgType = MsgType.NONE,
      Cmd cmd = Cmd.NONE,
      short subCmd = 0,
      short error = 0,
      AnyMsg data_type = AnyMsg.NONE,
      int dataOffset = 0) {
    builder.StartObject(9);
    ApiMsg.AddUserId(builder, userId);
    ApiMsg.AddData(builder, dataOffset);
    ApiMsg.AddMsgId(builder, msgId);
    ApiMsg.AddError(builder, error);
    ApiMsg.AddSubCmd(builder, subCmd);
    ApiMsg.AddDataType(builder, data_type);
    ApiMsg.AddCmd(builder, cmd);
    ApiMsg.AddMsgType(builder, msgType);
    ApiMsg.AddNeedAck(builder, needAck);
    return ApiMsg.EndApiMsg(builder);
  }

  public static void StartApiMsg(FlatBufferBuilder builder) { builder.StartObject(9); }
  public static void AddUserId(FlatBufferBuilder builder, long userId) { builder.AddLong(0, userId, 0); }
  public static void AddMsgId(FlatBufferBuilder builder, int msgId) { builder.AddInt(1, msgId, 0); }
  public static void AddNeedAck(FlatBufferBuilder builder, bool needAck) { builder.AddBool(2, needAck, false); }
  public static void AddMsgType(FlatBufferBuilder builder, MsgType msgType) { builder.AddSbyte(3, (sbyte)msgType, 0); }
  public static void AddCmd(FlatBufferBuilder builder, Cmd cmd) { builder.AddSbyte(4, (sbyte)cmd, 0); }
  public static void AddSubCmd(FlatBufferBuilder builder, short subCmd) { builder.AddShort(5, subCmd, 0); }
  public static void AddError(FlatBufferBuilder builder, short error) { builder.AddShort(6, error, 0); }
  public static void AddDataType(FlatBufferBuilder builder, AnyMsg dataType) { builder.AddByte(7, (byte)dataType, 0); }
  public static void AddData(FlatBufferBuilder builder, int dataOffset) { builder.AddOffset(8, dataOffset, 0); }
  public static Offset<ApiMsg> EndApiMsg(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ApiMsg>(o);
  }
  public static void FinishApiMsgBuffer(FlatBufferBuilder builder, Offset<ApiMsg> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedApiMsgBuffer(FlatBufferBuilder builder, Offset<ApiMsg> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
