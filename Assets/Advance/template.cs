// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyGame.Demo
{

using global::System;
using global::FlatBuffers;

public struct ByteHolder : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ByteHolder GetRootAsByteHolder(ByteBuffer _bb) { return GetRootAsByteHolder(_bb, new ByteHolder()); }
  public static ByteHolder GetRootAsByteHolder(ByteBuffer _bb, ByteHolder obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ByteHolder __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sbyte Data(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<ByteHolder> CreateByteHolder(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartObject(1);
    ByteHolder.AddData(builder, dataOffset);
    return ByteHolder.EndByteHolder(builder);
  }

  public static void StartByteHolder(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<ByteHolder> EndByteHolder(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ByteHolder>(o);
  }
};

public struct SyncData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SyncData GetRootAsSyncData(ByteBuffer _bb) { return GetRootAsSyncData(_bb, new SyncData()); }
  public static SyncData GetRootAsSyncData(ByteBuffer _bb, SyncData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SyncData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Model { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetModelBytes() { return __p.__vector_as_arraysegment(4); }
  public ByteHolder? Data(int j) { int o = __p.__offset(6); return o != 0 ? (ByteHolder?)(new ByteHolder()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SyncData> CreateSyncData(FlatBufferBuilder builder,
      StringOffset modelOffset = default(StringOffset),
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartObject(2);
    SyncData.AddData(builder, dataOffset);
    SyncData.AddModel(builder, modelOffset);
    return SyncData.EndSyncData(builder);
  }

  public static void StartSyncData(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddModel(FlatBufferBuilder builder, StringOffset modelOffset) { builder.AddOffset(0, modelOffset.Value, 0); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(1, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<ByteHolder>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SyncData> EndSyncData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SyncData>(o);
  }
};

public struct SyncUserDataResp : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SyncUserDataResp GetRootAsSyncUserDataResp(ByteBuffer _bb) { return GetRootAsSyncUserDataResp(_bb, new SyncUserDataResp()); }
  public static SyncUserDataResp GetRootAsSyncUserDataResp(ByteBuffer _bb, SyncUserDataResp obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SyncUserDataResp __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SyncData? Data(int j) { int o = __p.__offset(4); return o != 0 ? (SyncData?)(new SyncData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SyncUserDataResp> CreateSyncUserDataResp(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartObject(1);
    SyncUserDataResp.AddData(builder, dataOffset);
    return SyncUserDataResp.EndSyncUserDataResp(builder);
  }

  public static void StartSyncUserDataResp(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<SyncData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SyncUserDataResp> EndSyncUserDataResp(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SyncUserDataResp>(o);
  }
};


}
