// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyGame.Other
{

using global::System;
using global::FlatBuffers;

public enum Color : sbyte
{
 Red = 0,
 Green = 1,
 Blue = 2,
};

public enum Equipment : byte
{
 NONE = 0,
 Weapon = 1,
 Armor = 2,
};

public struct Fiend : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Fiend GetRootAsFiend(ByteBuffer _bb) { return GetRootAsFiend(_bb, new Fiend()); }
  public static Fiend GetRootAsFiend(ByteBuffer _bb, Fiend obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Fiend __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short Mana { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public short Hp { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
  public Equipment EquippedType { get { int o = __p.__offset(10); return o != 0 ? (Equipment)__p.bb.Get(o + __p.bb_pos) : Equipment.NONE; } }
  public TTable? Equipped<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(12); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<Fiend> CreateFiend(FlatBufferBuilder builder,
      short mana = 0,
      short hp = 0,
      StringOffset nameOffset = default(StringOffset),
      Equipment equipped_type = Equipment.NONE,
      int equippedOffset = 0) {
    builder.StartObject(5);
    Fiend.AddEquipped(builder, equippedOffset);
    Fiend.AddName(builder, nameOffset);
    Fiend.AddHp(builder, hp);
    Fiend.AddMana(builder, mana);
    Fiend.AddEquippedType(builder, equipped_type);
    return Fiend.EndFiend(builder);
  }

  public static void StartFiend(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddMana(FlatBufferBuilder builder, short mana) { builder.AddShort(0, mana, 0); }
  public static void AddHp(FlatBufferBuilder builder, short hp) { builder.AddShort(1, hp, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddEquippedType(FlatBufferBuilder builder, Equipment equippedType) { builder.AddByte(3, (byte)equippedType, 0); }
  public static void AddEquipped(FlatBufferBuilder builder, int equippedOffset) { builder.AddOffset(4, equippedOffset, 0); }
  public static Offset<Fiend> EndFiend(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Fiend>(o);
  }
};

public struct Monster : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Monster GetRootAsMonster(ByteBuffer _bb) { return GetRootAsMonster(_bb, new Monster()); }
  public static Monster GetRootAsMonster(ByteBuffer _bb, Monster obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Monster __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short Mana { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)150; } }
  public short Hp { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)100; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
  public byte Inventory(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int InventoryLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetInventoryBytes() { return __p.__vector_as_arraysegment(12); }
  public sbyte Data(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int DataLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(14); }
  public Color Color { get { int o = __p.__offset(16); return o != 0 ? (Color)__p.bb.GetSbyte(o + __p.bb_pos) : Color.Blue; } }
  public Weapon? Weapons(int j) { int o = __p.__offset(18); return o != 0 ? (Weapon?)(new Weapon()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int WeaponsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Equipment EquippedType { get { int o = __p.__offset(20); return o != 0 ? (Equipment)__p.bb.Get(o + __p.bb_pos) : Equipment.NONE; } }
  public TTable? Equipped<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(22); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<Monster> CreateMonster(FlatBufferBuilder builder,
      short mana = 150,
      short hp = 100,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset inventoryOffset = default(VectorOffset),
      VectorOffset dataOffset = default(VectorOffset),
      Color color = Color.Blue,
      VectorOffset weaponsOffset = default(VectorOffset),
      Equipment equipped_type = Equipment.NONE,
      int equippedOffset = 0) {
    builder.StartObject(10);
    Monster.AddEquipped(builder, equippedOffset);
    Monster.AddWeapons(builder, weaponsOffset);
    Monster.AddData(builder, dataOffset);
    Monster.AddInventory(builder, inventoryOffset);
    Monster.AddName(builder, nameOffset);
    Monster.AddHp(builder, hp);
    Monster.AddMana(builder, mana);
    Monster.AddEquippedType(builder, equipped_type);
    Monster.AddColor(builder, color);
    return Monster.EndMonster(builder);
  }

  public static void StartMonster(FlatBufferBuilder builder) { builder.StartObject(10); }
  public static void AddMana(FlatBufferBuilder builder, short mana) { builder.AddShort(0, mana, 150); }
  public static void AddHp(FlatBufferBuilder builder, short hp) { builder.AddShort(1, hp, 100); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddInventory(FlatBufferBuilder builder, VectorOffset inventoryOffset) { builder.AddOffset(4, inventoryOffset.Value, 0); }
  public static VectorOffset CreateInventoryVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static void StartInventoryVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(5, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddColor(FlatBufferBuilder builder, Color color) { builder.AddSbyte(6, (sbyte)color, 2); }
  public static void AddWeapons(FlatBufferBuilder builder, VectorOffset weaponsOffset) { builder.AddOffset(7, weaponsOffset.Value, 0); }
  public static VectorOffset CreateWeaponsVector(FlatBufferBuilder builder, Offset<Weapon>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartWeaponsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEquippedType(FlatBufferBuilder builder, Equipment equippedType) { builder.AddByte(8, (byte)equippedType, 0); }
  public static void AddEquipped(FlatBufferBuilder builder, int equippedOffset) { builder.AddOffset(9, equippedOffset, 0); }
  public static Offset<Monster> EndMonster(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Monster>(o);
  }
};

public struct Weapon : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Weapon GetRootAsWeapon(ByteBuffer _bb) { return GetRootAsWeapon(_bb, new Weapon()); }
  public static Weapon GetRootAsWeapon(ByteBuffer _bb, Weapon obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Weapon __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
  public short Damage { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }

  public static Offset<Weapon> CreateWeapon(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      short damage = 0) {
    builder.StartObject(2);
    Weapon.AddName(builder, nameOffset);
    Weapon.AddDamage(builder, damage);
    return Weapon.EndWeapon(builder);
  }

  public static void StartWeapon(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddDamage(FlatBufferBuilder builder, short damage) { builder.AddShort(1, damage, 0); }
  public static Offset<Weapon> EndWeapon(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Weapon>(o);
  }
};

public struct Armor : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Armor GetRootAsArmor(ByteBuffer _bb) { return GetRootAsArmor(_bb, new Armor()); }
  public static Armor GetRootAsArmor(ByteBuffer _bb, Armor obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Armor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
  public short Damage { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public short Defence { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }

  public static Offset<Armor> CreateArmor(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      short damage = 0,
      short defence = 0) {
    builder.StartObject(3);
    Armor.AddName(builder, nameOffset);
    Armor.AddDefence(builder, defence);
    Armor.AddDamage(builder, damage);
    return Armor.EndArmor(builder);
  }

  public static void StartArmor(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddDamage(FlatBufferBuilder builder, short damage) { builder.AddShort(1, damage, 0); }
  public static void AddDefence(FlatBufferBuilder builder, short defence) { builder.AddShort(2, defence, 0); }
  public static Offset<Armor> EndArmor(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Armor>(o);
  }
};


}
